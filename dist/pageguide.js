!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("PageGuide",[],e):"object"==typeof exports?exports.PageGuide=e():t.PageGuide=e()}(window,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s="./src/PageGuide.ts")}({"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/PageGuide.scss":function(t,e,n){(t.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([t.i,'.z-depth-1 {\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.24); }\n\n.z-depth-2 {\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.23); }\n\n.z-depth-3, .page-guide-button-start, .page-guide-item .page-guide-item-button-exit {\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.23); }\n\n.z-depth-4 {\n  box-shadow: 0 10px 18px rgba(0, 0, 0, 0.22); }\n\n.z-depth-5, .page-guide-item {\n  box-shadow: 0 15px 20px rgba(0, 0, 0, 0.22); }\n\n.page-guide-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: none;\n  opacity: 0;\n  z-index: 9999998;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; }\n  .page-guide-backdrop.active {\n    opacity: 1; }\n\n.page-guide-button-start {\n  z-index: 9999998;\n  display: block;\n  width: 24px;\n  height: 24px;\n  background-color: transparent;\n  border: 3px solid #666666;\n  border-radius: 12px;\n  font-style: italic;\n  font-weight: 700;\n  padding: 0;\n  text-align: center;\n  outline: none !important; }\n\n.page-guide-item {\n  font-family: \'Ubuntu\',\'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;\n  position: absolute;\n  z-index: 9999999;\n  padding: 16px;\n  border: 1px solid white;\n  background-color: #F8F8F8;\n  min-width: 256px;\n  max-width: 768px;\n  width: 50%;\n  margin: 16px;\n  border: none; }\n  .page-guide-item[x-placement^="center"] {\n    border-top: 8px solid #ff9933; }\n  .page-guide-item[x-placement^="bottom"] {\n    border-top: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="bottom"] .page-guide-item-arrow {\n      border-bottom-color: #ff9933;\n      top: -32px;\n      bottom: initial;\n      margin-top: 0;\n      left: 50%;\n      right: initial; }\n  .page-guide-item[x-placement^="top"] {\n    border-bottom: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="top"] .page-guide-item-arrow {\n      border-top-color: #ff9933;\n      top: initial;\n      bottom: -32px;\n      margin-bottom: 0;\n      left: 50%;\n      right: initial; }\n  .page-guide-item[x-placement^="right"] {\n    border-left: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="right"] .page-guide-item-arrow {\n      border-right-color: #ff9933;\n      left: -32px;\n      right: initial;\n      bottom: initial;\n      margin-left: 0;\n      top: 50%; }\n  .page-guide-item[x-placement^="left"] {\n    border-right: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="left"] .page-guide-item-arrow {\n      border-left-color: #ff9933;\n      left: initial;\n      bottom: initial;\n      right: -32px;\n      margin-right: 0;\n      top: 50%; }\n  .page-guide-item .page-guide-item-arrow {\n    position: absolute;\n    padding: 0;\n    margin: -16px;\n    border: 16px solid transparent; }\n  .page-guide-item h1 {\n    text-align: center;\n    font-size: 32px;\n    line-height: 50px;\n    padding: 0;\n    margin: 0;\n    border-bottom: 1px solid #666666; }\n  .page-guide-item .page-guide-item-counter {\n    position: absolute;\n    top: 16px;\n    right: 16px;\n    font-weight: 300;\n    color: rgba(0, 0, 0, 0.5);\n    line-height: 50px; }\n  .page-guide-item .page-guide-item-buttons {\n    display: flex; }\n    .page-guide-item .page-guide-item-buttons .page-guide-item-button {\n      flex: 1px; }\n      .page-guide-item .page-guide-item-buttons .page-guide-item-button:hover {\n        background-color: rgba(0, 0, 0, 0.05); }\n    .page-guide-item .page-guide-item-buttons .page-guide-item-button-previous {\n      text-align: right; }\n    .page-guide-item .page-guide-item-buttons .page-guide-item-button-next {\n      text-align: left; }\n  .page-guide-item .page-guide-item-button {\n    display: inline-block;\n    border: none;\n    background: transparent;\n    font-size: 32px;\n    outline: none !important;\n    border-radius: 5px;\n    transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; }\n    .page-guide-item .page-guide-item-button:hover, .page-guide-item .page-guide-item-button:active, .page-guide-item .page-guide-item-button:focus {\n      background-color: #E0E0E0; }\n    .page-guide-item .page-guide-item-button:disabled {\n      visibility: hidden; }\n  .page-guide-item .page-guide-item-button-exit {\n    position: absolute;\n    bottom: -16px;\n    right: 16px;\n    width: 32px;\n    height: 32px;\n    background-color: #E8E8E8;\n    border-radius: 50%;\n    padding: 0;\n    line-height: 0;\n    text-align: center; }\n',""])},"./node_modules/css-loader/lib/css-base.js":function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var o=(s=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),r=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[n].concat(r).concat([o]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},o=0;o<this.length;o++){var r=this[o][0];"number"==typeof r&&(i[r]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&i[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},"./node_modules/popper.js/dist/esm/popper.js":function(t,e,n){"use strict";n.r(e),function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,i=["Edge","Trident","Firefox"],o=0,r=0;r<i.length;r+=1)if(n&&navigator.userAgent.indexOf(i[r])>=0){o=1;break}var s=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},o))}};function a(t){return t&&"[object Function]"==={}.toString.call(t)}function u(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function p(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function d(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=u(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(n+o+i)?t:d(p(t))}var l=n&&!(!window.MSInputMethodContext||!document.documentMode),c=n&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?l:10===t?c:l||c}function h(t){if(!t)return document.documentElement;for(var e=f(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:t?t.ownerDocument.documentElement:document.documentElement}function m(t){return null!==t.parentNode?m(t.parentNode):t}function g(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,o=n?e:t,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var s,a,u=r.commonAncestorContainer;if(t!==u&&e!==u||i.contains(o))return"BODY"===(a=(s=u).nodeName)||"HTML"!==a&&h(s.firstElementChild)!==s?h(u):u;var p=m(t);return p.host?g(p.host,e):g(t,m(e).host)}function b(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function v(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function y(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],f(10)?n["offset"+t]+i["margin"+("Height"===t?"Top":"Left")]+i["margin"+("Height"===t?"Bottom":"Right")]:0)}function x(){var t=document.body,e=document.documentElement,n=f(10)&&getComputedStyle(e);return{height:y("Height",t,e,n),width:y("Width",t,e,n)}}var w=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},E=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),I=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function P(t){return S({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(f(10)){e=t.getBoundingClientRect();var n=b(t,"top"),i=b(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},r="HTML"===t.nodeName?x():{},s=r.width||t.clientWidth||o.right-o.left,a=r.height||t.clientHeight||o.bottom-o.top,p=t.offsetWidth-s,d=t.offsetHeight-a;if(p||d){var l=u(t);p-=v(l,"x"),d-=v(l,"y"),o.width-=p,o.height-=d}return P(o)}function k(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),o="HTML"===e.nodeName,r=C(t),s=C(e),a=d(t),p=u(e),l=parseFloat(p.borderTopWidth,10),c=parseFloat(p.borderLeftWidth,10);n&&"HTML"===e.nodeName&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var h=P({top:r.top-s.top-l,left:r.left-s.left-c,width:r.width,height:r.height});if(h.marginTop=0,h.marginLeft=0,!i&&o){var m=parseFloat(p.marginTop,10),g=parseFloat(p.marginLeft,10);h.top-=l-m,h.bottom-=l-m,h.left-=c-g,h.right-=c-g,h.marginTop=m,h.marginLeft=g}return(i&&!n?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(h=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=b(e,"top"),o=b(e,"left"),r=n?-1:1;return t.top+=i*r,t.bottom+=i*r,t.left+=o*r,t.right+=o*r,t}(h,e)),h}function G(t){if(!t||!t.parentElement||f())return document.documentElement;for(var e=t.parentElement;e&&"none"===u(e,"transform");)e=e.parentElement;return e||document.documentElement}function L(t,e,n,i){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r={top:0,left:0},s=o?G(t):g(t,e);if("viewport"===i)r=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=k(t,n),o=Math.max(n.clientWidth,window.innerWidth||0),r=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:b(n),a=e?0:b(n,"left");return P({top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:o,height:r})}(s,o);else{var a=void 0;"scrollParent"===i?"BODY"===(a=d(p(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===i?t.ownerDocument.documentElement:i;var l=k(a,s,o);if("HTML"!==a.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===u(e,"position")||t(p(e)))}(s))r=l;else{var c=x(),f=c.height,h=c.width;r.top+=l.top-l.marginTop,r.bottom=f+l.top,r.left+=l.left-l.marginLeft,r.right=h+l.left}}return r.left+=n,r.top+=n,r.right-=n,r.bottom-=n,r}function O(t,e,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=L(n,i,r,o),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},u=Object.keys(a).map(function(t){return S({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),p=u.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),d=p.length>0?p[0].key:u[0].key,l=t.split("-")[1];return d+(l?"-"+l:"")}function R(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return k(n,i?G(e):g(e,n),i)}function F(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function M(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function N(t,e,n){n=n.split("-")[0];var i=F(t),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",a=r?"left":"top",u=r?"height":"width",p=r?"width":"height";return o[s]=e[s]+e[u]/2-i[u]/2,o[a]=n===a?e[a]-i[p]:e[M(a)],o}function T(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function _(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=T(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&a(n)&&(e.offsets.popper=P(e.offsets.popper),e.offsets.reference=P(e.offsets.reference),e=n(e,t))}),e}function j(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function A(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var o=e[i],r=o?""+o+n:t;if(void 0!==document.body.style[r])return r}return null}function U(t){var e=t.ownerDocument;return e?e.defaultView:window}function D(t,e,n,i){n.updateBound=i,U(t).addEventListener("resize",n.updateBound,{passive:!0});var o=d(t);return function t(e,n,i,o){var r="BODY"===e.nodeName,s=r?e.ownerDocument.defaultView:e;s.addEventListener(n,i,{passive:!0}),r||t(d(s.parentNode),n,i,o),o.push(s)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function B(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,U(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function H(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function X(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&H(e[n])&&(i="px"),t.style[n]=e[n]+i})}function W(t,e,n){var i=T(t,function(t){return t.name===e}),o=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!o){var r="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}var z=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],q=z.slice(3);function Y(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=q.indexOf(t),i=q.slice(n+1).concat(q.slice(0,n));return e?i.reverse():i}var K={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function V(t,e,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),s=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=s.indexOf(T(s,function(t){return-1!==t.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,p=-1!==a?[s.slice(0,a).concat([s[a].split(u)[0]]),[s[a].split(u)[1]].concat(s.slice(a+1))]:[s];return(p=p.map(function(t,i){var o=(1===i?!r:r)?"height":"width",s=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],s=o[2];if(!r)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return P(a)[e]/100*r}if("vh"===s||"vw"===s)return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r;return r}(t,o,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){H(n)&&(o[e]+=n*("-"===t[i-1]?-1:1))})}),o}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var o=t.offsets,r=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),u=a?"left":"top",p=a?"width":"height",d={start:I({},u,r[u]),end:I({},u,r[u]+r[p]-s[p])};t.offsets.popper=S({},s,d[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,o=t.offsets,r=o.popper,s=o.reference,a=i.split("-")[0],u=void 0;return u=H(+n)?[+n,0]:V(n,r,s,a),"left"===a?(r.top+=u[0],r.left-=u[1]):"right"===a?(r.top+=u[0],r.left+=u[1]):"top"===a?(r.left+=u[0],r.top-=u[1]):"bottom"===a&&(r.left+=u[0],r.top+=u[1]),t.popper=r,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||h(t.instance.popper);t.instance.reference===n&&(n=h(n));var i=A("transform"),o=t.instance.popper.style,r=o.top,s=o.left,a=o[i];o.top="",o.left="",o[i]="";var u=L(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);o.top=r,o.left=s,o[i]=a,e.boundaries=u;var p=e.priority,d=t.offsets.popper,l={primary:function(t){var n=d[t];return d[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(d[t],u[t])),I({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=d[n];return d[t]>u[t]&&!e.escapeWithReference&&(i=Math.min(d[n],u[t]-("right"===t?d.width:d.height))),I({},n,i)}};return p.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";d=S({},d,l[e](t))}),t.offsets.popper=d,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,o=t.placement.split("-")[0],r=Math.floor,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",u=s?"left":"top",p=s?"width":"height";return n[a]<r(i[u])&&(t.offsets.popper[u]=r(i[u])-n[p]),n[u]>r(i[a])&&(t.offsets.popper[u]=r(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!W(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],r=t.offsets,s=r.popper,a=r.reference,p=-1!==["left","right"].indexOf(o),d=p?"height":"width",l=p?"Top":"Left",c=l.toLowerCase(),f=p?"left":"top",h=p?"bottom":"right",m=F(i)[d];a[h]-m<s[c]&&(t.offsets.popper[c]-=s[c]-(a[h]-m)),a[c]+m>s[h]&&(t.offsets.popper[c]+=a[c]+m-s[h]),t.offsets.popper=P(t.offsets.popper);var g=a[c]+a[d]/2-m/2,b=u(t.instance.popper),v=parseFloat(b["margin"+l],10),y=parseFloat(b["border"+l+"Width"],10),x=g-t.offsets.popper[c]-v-y;return x=Math.max(Math.min(s[d]-m,x),0),t.arrowElement=i,t.offsets.arrow=(I(n={},c,Math.round(x)),I(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(j(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=L(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],o=M(i),r=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case K.FLIP:s=[i,o];break;case K.CLOCKWISE:s=Y(i);break;case K.COUNTERCLOCKWISE:s=Y(i,!0);break;default:s=e.behavior}return s.forEach(function(a,u){if(i!==a||s.length===u+1)return t;i=t.placement.split("-")[0],o=M(i);var p=t.offsets.popper,d=t.offsets.reference,l=Math.floor,c="left"===i&&l(p.right)>l(d.left)||"right"===i&&l(p.left)<l(d.right)||"top"===i&&l(p.bottom)>l(d.top)||"bottom"===i&&l(p.top)<l(d.bottom),f=l(p.left)<l(n.left),h=l(p.right)>l(n.right),m=l(p.top)<l(n.top),g=l(p.bottom)>l(n.bottom),b="left"===i&&f||"right"===i&&h||"top"===i&&m||"bottom"===i&&g,v=-1!==["top","bottom"].indexOf(i),y=!!e.flipVariations&&(v&&"start"===r&&f||v&&"end"===r&&h||!v&&"start"===r&&m||!v&&"end"===r&&g);(c||b||y)&&(t.flipped=!0,(c||b)&&(i=s[u+1]),y&&(r=function(t){return"end"===t?"start":"start"===t?"end":t}(r)),t.placement=i+(r?"-"+r:""),t.offsets.popper=S({},t.offsets.popper,N(t.instance.popper,t.offsets.reference,t.placement)),t=_(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,r=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=r[n]-(a?o[s?"width":"height"]:0),t.placement=M(e),t.offsets.popper=P(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!W(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=T(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,o=t.offsets.popper,r=T(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==r?r:e.gpuAcceleration,a=C(h(t.instance.popper)),u={position:o.position},p={left:Math.floor(o.left),top:Math.round(o.top),bottom:Math.round(o.bottom),right:Math.floor(o.right)},d="bottom"===n?"top":"bottom",l="right"===i?"left":"right",c=A("transform"),f=void 0,m=void 0;if(m="bottom"===d?-a.height+p.bottom:p.top,f="right"===l?-a.width+p.right:p.left,s&&c)u[c]="translate3d("+f+"px, "+m+"px, 0)",u[d]=0,u[l]=0,u.willChange="transform";else{var g="bottom"===d?-1:1,b="right"===l?-1:1;u[d]=m*g,u[l]=f*b,u.willChange=d+", "+l}var v={"x-placement":t.placement};return t.attributes=S({},v,t.attributes),t.styles=S({},u,t.styles),t.arrowStyles=S({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return X(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&X(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){var r=R(o,e,t,n.positionFixed),s=O(n.placement,r,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),X(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function t(e,n){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=s(this.update.bind(this)),this.options=S({},t.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},t.Defaults.modifiers,o.modifiers)).forEach(function(e){i.options.modifiers[e]=S({},t.Defaults.modifiers[e]||{},o.modifiers?o.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return S({name:t},i.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&a(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return E(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=R(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=O(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=N(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=_(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[A("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=D(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return B.call(this)}}]),t}();J.Utils=("undefined"!=typeof window?window:t).PopperUtils,J.placements=z,J.Defaults=$,e.default=J}.call(this,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/style-loader/lib/addStyles.js":function(t,e,n){var i,o,r={},s=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=i.apply(this,arguments)),o}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,p=0,d=[],l=n("./node_modules/style-loader/lib/urls.js");function c(t,e){for(var n=0;n<t.length;n++){var i=t[n],o=r[i.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](i.parts[s]);for(;s<i.parts.length;s++)o.parts.push(v(i.parts[s],e))}else{var a=[];for(s=0;s<i.parts.length;s++)a.push(v(i.parts[s],e));r[i.id]={id:i.id,refs:1,parts:a}}}}function f(t,e){for(var n=[],i={},o=0;o<t.length;o++){var r=t[o],s=e.base?r[0]+e.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};i[s]?i[s].parts.push(a):n.push(i[s]={id:s,parts:[a]})}return n}function h(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=d[d.length-1];if("top"===t.insertAt)i?i.nextSibling?n.insertBefore(e,i.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),d.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=d.indexOf(t);e>=0&&d.splice(e,1)}function g(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function v(t,e){var n,i,o,r;if(e.transform&&t.css){if(!(r=e.transform(t.css)))return function(){};t.css=r}if(e.singleton){var s=p++;n=u||(u=g(e)),i=w.bind(null,n,s,!1),o=w.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),i=function(t,e,n){var i=n.css,o=n.sourceMap,r=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||r)&&(i=l(i));o&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([i],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),i=function(t,e){var n=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return c(n,e),function(t){for(var i=[],o=0;o<n.length;o++){var s=n[o];(a=r[s.id]).refs--,i.push(a)}t&&c(f(t,e),e);for(o=0;o<i.length;o++){var a;if(0===(a=i[o]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete r[a.id]}}}};var y,x=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function w(t,e,n,i){var o=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=x(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}},"./node_modules/style-loader/lib/urls.js":function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,i=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(o=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./node_modules/webpack/buildin/global.js":function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},"./src/GUI/ButtonGUI.ts":function(t,e,n){"use strict";e.__esModule=!0;var i=n("./src/PageGuide.ts"),o=function(){function t(t){var e=this;this.position="absolute",this.top=32,this.right=32,this.bottom="initial",this.left="initial",this.content="i",this.style={"padding-right":"2px"},void 0!==t&&Object.keys(t).forEach(function(n){return e[n]=t[n]}),this.markup=document.createElement("button"),this.markup.innerHTML=this.content,this.markup.classList.add(i.PageGuide.CSS_PREFIX+"-button-start"),this.markup.style.position=this.position,this.markup.style.top=this.toStyleString(this.top),this.markup.style.right=this.toStyleString(this.right),this.markup.style.bottom=this.toStyleString(this.bottom),this.markup.style.left=this.toStyleString(this.left),Object.keys(this.style).forEach(function(t){return e.markup.style.setProperty(t,e.style[t])})}return t.prototype.toStyleString=function(t){return"number"==typeof t?t+"px":t},t}();e.ButtonGUI=o},"./src/GUI/PageGuideGUI.ts":function(t,e,n){"use strict";e.__esModule=!0;var i=n("./src/PageGuide.ts"),o=n("./src/GUI/ButtonGUI.ts"),r=function(){function t(t){void 0===t&&(t=!0),this.buttonDefinition=t,this.canvas=document.createElement("canvas"),this.canvas.className=i.PageGuide.CSS_PREFIX+"-backdrop",this.ctx=this.canvas.getContext("2d"),document.body.appendChild(this.canvas),this.buttonDefinition&&(!0===this.buttonDefinition?this.btnStart=new o.ButtonGUI:this.btnStart=new o.ButtonGUI(this.buttonDefinition),document.body.appendChild(this.btnStart.markup))}return t.prototype.onStart=function(t){this.btnStart.markup.onclick=t},t.prototype.onEnd=function(t){this.canvas.onclick=t},t.prototype.start=function(){this.targets=void 0,this.update(),this.canvas.style.display="block",this.canvas.classList.add("active")},t.prototype.update=function(){if(this.renderBackdrop(),void 0!==this.targets)for(var t=0;t<this.targets.length;t++){var e=this.targets.item(t).getBoundingClientRect();this.ctx.clearRect(e.left,e.top,e.width,e.height)}},t.prototype.stop=function(){var t=this;this.canvas.classList.remove("active"),setTimeout(function(){return t.canvas.style.display=""},500)},t.prototype.highlight=function(t){this.targets=t,this.update()},t.prototype.renderBackdrop=function(){var t=window.innerWidth,e=window.innerHeight;this.canvas.setAttribute("width",t+"px"),this.canvas.setAttribute("height",e+"px");var n=this.ctx.createRadialGradient(t/2,e/2,0,t/2,e/2,Math.max(t,e));n.addColorStop(0,"rgba(0,0,0,0.5)"),n.addColorStop(1,"rgba(0,0,0,0.85)"),this.ctx.clearRect(0,0,t,e),this.ctx.fillStyle=n,this.ctx.fillRect(0,0,t,e)},t}();e.PageGuideGui=r},"./src/GUI/PageGuideItemGUI.ts":function(t,e,n){"use strict";e.__esModule=!0;var i=n("./src/PageGuideItem.ts"),o=n("./src/PageGuide.ts"),r=n("./node_modules/popper.js/dist/esm/popper.js"),s=function(){function t(t){this.pageGuideItem=t,this.popperShifts={top:["bottom","left","right"],right:["left","top","bottom"],bottom:["top","left","right"],left:["right","top","bottom"]},this.markup=document.createElement("article"),this.btnExit=document.createElement("button"),this.btnPrevious=document.createElement("button"),this.btnNext=document.createElement("button"),this.buttons=document.createElement("section"),this.content=document.createElement("section"),this.title=document.createElement("h1"),this.counter=document.createElement("section"),this.arrow=document.createElement("div"),this.markup.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX,this.arrow.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-arrow",this.content.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-content",this.counter.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-counter",this.buttons.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-buttons",this.btnExit.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-button "+o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-button-exit",this.btnPrevious.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-button "+o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-button-previous",this.btnNext.className=o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-button "+o.PageGuide.CSS_PREFIX+"-"+i.PageGuideItem.CSS_PREFIX+"-button-next",this.buttons.appendChild(this.btnPrevious),this.buttons.appendChild(this.btnNext),this.markup.appendChild(this.arrow),this.markup.appendChild(this.btnExit),this.markup.appendChild(this.title),this.markup.appendChild(this.counter),this.markup.appendChild(this.content),this.markup.appendChild(this.buttons),this.title.innerHTML=this.pageGuideItem.title,this.content.innerHTML=this.pageGuideItem.content,this.btnExit.innerHTML="&times;",this.btnPrevious.innerHTML="&laquo;",this.btnNext.innerHTML="&raquo;",this.counter.innerHTML=this.pageGuideItem.index+1+" / "+this.pageGuideItem.collentionLength,0===this.pageGuideItem.index&&this.btnPrevious.setAttribute("disabled","disabled"),this.pageGuideItem.index===this.pageGuideItem.collentionLength-1&&this.btnNext.setAttribute("disabled","disabled")}return t.prototype.position=function(){var t=this.markup.getBoundingClientRect(),e=(t.left,t.width,t.top,t.height,0),n=0,i=this.pageGuideItem.position;if(this.arrow.style.top="",this.arrow.style.right="",this.arrow.style.bottom="",this.arrow.style.left="",void 0===this.pageGuideItem.targets||0===this.pageGuideItem.targets.length||"center"===i)e=(window.innerWidth-t.width)/2,n=(window.innerHeight-t.height)/2,this.pageGuideItem.position="center",this.markup.setAttribute("x-placement",this.pageGuideItem.position),this.markup.style.left=(e>>0)+"px",this.markup.style.top=(n>>0)+"px";else{var o=this.pageGuideItem.targets[0];o.getBoundingClientRect();this.popper=new r.default(o,this.markup,{placement:i,modifiers:{arrow:{element:this.arrow},flip:{behavior:this.popperShifts[i]}}})}},t.prototype.update=function(){void 0!==this.popper?this.popper.update():this.position()},t.prototype.onExit=function(t){this.btnExit.onclick=t},t.prototype.onPrevious=function(t){this.btnPrevious.onclick=t},t.prototype.onNext=function(t){this.btnNext.onclick=t},t}();e.PageGuideItemGUI=s},"./src/PageGuide.scss":function(t,e,n){var i=n("./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/PageGuide.scss");"string"==typeof i&&(i=[[t.i,i,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("./node_modules/style-loader/lib/addStyles.js")(i,o);i.locals&&(t.exports=i.locals)},"./src/PageGuide.ts":function(t,e,n){"use strict";e.__esModule=!0;var i=n("./src/PageGuideItem.ts"),o=n("./src/GUI/PageGuideGUI.ts");n("./src/PageGuide.scss");var r=function(){function t(t,e){void 0===e&&(e=!0);var n=this;this.isActive=!1,this.activeIndex=0,this.gui=new o.PageGuideGui(e),this.items=t.filter(function(t){return void 0===t.element||document.querySelectorAll(t.element).length>0}).map(function(t,e,o){var r=new i.PageGuideItem(t.content,e,o.length,t.element,t.title,t.position);return r.onExit(function(){n.stop()}),r.onPrevious(function(){n.activeIndex--,n.step()}),r.onNext(function(){n.activeIndex++,n.step()}),r}),!1!==e&&this.gui.onStart(function(){return n.start()}),this.gui.onEnd(function(){return n.stop()}),window.onkeydown=function(t){if(!(!n.isActive||t.altKey||t.shiftKey||t.ctrlKey||t.metaKey))switch(t.key){case"ArrowUp":case"Up":case"ArrowLeft":case"Left":n.activeIndex--,n.step(),t.preventDefault();break;case"ArrowDown":case"Down":case"ArrowRight":case"Right":case"Enter":n.activeIndex++,n.step(),t.preventDefault();break;case"Escape":case"Esc":n.stop(),t.preventDefault()}},window.onresize=function(t){n.isActive&&(n.gui.update(),void 0!==n.activeItem&&n.activeItem.update())}}return t.prototype.start=function(){this.isActive=!0,this.gui.start(),this.step(),void 0!==this.onStartCallback&&this.onStartCallback()},t.prototype.step=function(t){var e=this;if(void 0!==t&&t>=0&&t<=this.items.length-1&&(this.activeIndex=t),void 0!==this.activeItem&&this.cleanActiveItem(),this.activeIndex<0||this.activeIndex>=this.items.length)return this.stop();this.activeItem=this.items[this.activeIndex],this.activeItem.draw(function(){e.gui.highlight(e.activeItem.targets)})},t.prototype.cleanActiveItem=function(){void 0!==this.activeItem&&(this.activeItem.cleanup(),this.activeItem=void 0)},t.prototype.stop=function(){this.isActive=!1,this.gui.stop(),this.cleanActiveItem(),this.activeIndex=0,void 0!==this.onEndCallback&&this.onEndCallback()},t.prototype.onStart=function(t){this.onStartCallback=t},t.prototype.onEnd=function(t){this.onEndCallback=t},t.CSS_PREFIX="page-guide",t}();e.PageGuide=r},"./src/PageGuideItem.ts":function(t,e,n){"use strict";e.__esModule=!0;var i=n("./src/GUI/PageGuideItemGUI.ts"),o=function(){function t(t,e,n,o,r,s){void 0===r&&(r=""),void 0===s&&(s="bottom"),this.content=t,this.index=e,this.collentionLength=n,this.element=o,this.title=r,this.position=s,void 0!==this.element&&""!==this.element&&(this.targets=document.querySelectorAll(this.element)),this.gui=new i.PageGuideItemGUI(this)}return t.prototype.draw=function(t){var e=this;void 0!==this.targets&&0===this.targets.length||(void 0!==this.targets&&this.targets.length>0&&this.targets[0].scrollIntoView({block:"center",inline:"nearest"}),setTimeout(function(){document.body.appendChild(e.gui.markup),e.gui.position(),t()},0))},t.prototype.cleanup=function(){document.body.removeChild(this.gui.markup)},t.prototype.update=function(){this.gui.update()},t.prototype.onExit=function(t){this.gui.onExit(t)},t.prototype.onPrevious=function(t){this.gui.onPrevious(t)},t.prototype.onNext=function(t){this.gui.onNext(t)},t.CSS_PREFIX="item",t}();e.PageGuideItem=o}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,