!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("PageGuide",[],t):"object"==typeof exports?exports.PageGuide=t():e.PageGuide=t()}(window,function(){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i(i.s="./src/example/example.ts")}({"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/PageGuide.scss":function(e,t,i){(e.exports=i("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,'.z-depth-1 {\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.24); }\n\n.z-depth-2 {\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.23); }\n\n.z-depth-3, .page-guide-button-start, .page-guide-item .page-guide-item-button-exit {\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.23); }\n\n.z-depth-4 {\n  box-shadow: 0 10px 18px rgba(0, 0, 0, 0.22); }\n\n.z-depth-5, .page-guide-item {\n  box-shadow: 0 15px 20px rgba(0, 0, 0, 0.22); }\n\n.page-guide-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: none;\n  opacity: 0;\n  z-index: 9999998;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; }\n  .page-guide-backdrop.active {\n    opacity: 1; }\n\n.page-guide-button-start {\n  z-index: 9999998;\n  display: block;\n  width: 24px;\n  height: 24px;\n  background-color: transparent;\n  border: 3px solid #666666;\n  border-radius: 12px;\n  font-style: italic;\n  font-weight: 700;\n  padding: 0;\n  text-align: center;\n  outline: none !important; }\n\n.page-guide-item {\n  font-family: \'Ubuntu\',\'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;\n  position: absolute;\n  z-index: 9999999;\n  padding: 16px;\n  border: 1px solid white;\n  background-color: #F8F8F8;\n  min-width: 256px;\n  max-width: 768px;\n  width: 50%;\n  margin: 16px;\n  border: none; }\n  .page-guide-item[x-placement^="center"] {\n    border-top: 8px solid #ff9933; }\n  .page-guide-item[x-placement^="bottom"] {\n    border-top: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="bottom"] .page-guide-item-arrow {\n      border-bottom-color: #ff9933;\n      top: -32px;\n      bottom: initial;\n      margin-top: 0;\n      left: 50%;\n      right: initial; }\n  .page-guide-item[x-placement^="top"] {\n    border-bottom: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="top"] .page-guide-item-arrow {\n      border-top-color: #ff9933;\n      top: initial;\n      bottom: -32px;\n      margin-bottom: 0;\n      left: 50%;\n      right: initial; }\n  .page-guide-item[x-placement^="right"] {\n    border-left: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="right"] .page-guide-item-arrow {\n      border-right-color: #ff9933;\n      left: -32px;\n      right: initial;\n      bottom: initial;\n      margin-left: 0;\n      top: 50%; }\n  .page-guide-item[x-placement^="left"] {\n    border-right: 8px solid #ff9933; }\n    .page-guide-item[x-placement^="left"] .page-guide-item-arrow {\n      border-left-color: #ff9933;\n      left: initial;\n      bottom: initial;\n      right: -32px;\n      margin-right: 0;\n      top: 50%; }\n  .page-guide-item .page-guide-item-arrow {\n    position: absolute;\n    padding: 0;\n    margin: -16px;\n    border: 16px solid transparent; }\n  .page-guide-item h1 {\n    text-align: center;\n    font-size: 32px;\n    line-height: 50px;\n    padding: 0;\n    margin: 0;\n    border-bottom: 1px solid #666666; }\n  .page-guide-item .page-guide-item-counter {\n    position: absolute;\n    top: 16px;\n    right: 16px;\n    font-weight: 300;\n    color: rgba(0, 0, 0, 0.5);\n    line-height: 50px; }\n  .page-guide-item .page-guide-item-buttons {\n    display: flex; }\n    .page-guide-item .page-guide-item-buttons .page-guide-item-button {\n      flex: 1px; }\n      .page-guide-item .page-guide-item-buttons .page-guide-item-button:hover {\n        background-color: rgba(0, 0, 0, 0.05); }\n    .page-guide-item .page-guide-item-buttons .page-guide-item-button-previous {\n      text-align: right; }\n    .page-guide-item .page-guide-item-buttons .page-guide-item-button-next {\n      text-align: left; }\n  .page-guide-item .page-guide-item-button {\n    display: inline-block;\n    border: none;\n    background: transparent;\n    font-size: 32px;\n    outline: none !important;\n    border-radius: 5px;\n    transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; }\n    .page-guide-item .page-guide-item-button:hover, .page-guide-item .page-guide-item-button:active, .page-guide-item .page-guide-item-button:focus {\n      background-color: #E0E0E0; }\n    .page-guide-item .page-guide-item-button:disabled {\n      visibility: hidden; }\n  .page-guide-item .page-guide-item-button-exit {\n    position: absolute;\n    bottom: -16px;\n    right: 16px;\n    width: 32px;\n    height: 32px;\n    background-color: #E8E8E8;\n    border-radius: 50%;\n    padding: 0;\n    line-height: 0;\n    text-align: center; }\n',""])},"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/example/example-page.scss":function(e,t,i){(e.exports=i("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,".z-depth-1, #example-page aside li, #example-page section.content article {\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.24); }\n\n.z-depth-2, #example-page aside {\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.23); }\n\n.z-depth-3, #example-page .container {\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.23); }\n\n.z-depth-4 {\n  box-shadow: 0 10px 18px rgba(0, 0, 0, 0.22); }\n\n.z-depth-5 {\n  box-shadow: 0 15px 20px rgba(0, 0, 0, 0.22); }\n\n#example-page {\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 16px;\n  background-color: #333333;\n  box-sizing: border-box; }\n  #example-page *,\n  #example-page *:before,\n  #example-page *:after {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0; }\n  #example-page .container {\n    display: flex;\n    max-height: 100%;\n    background-color: #F0F0F0; }\n  #example-page aside {\n    width: 196px;\n    background: #ABABAB;\n    border-right: 2px solid #666666;\n    padding: 16px; }\n    #example-page aside ul {\n      padding: 0; }\n    #example-page aside li {\n      list-style: none;\n      display: block;\n      padding: 8px 16px;\n      background-color: #f0f0f0;\n      margin-bottom: 2px;\n      text-align: center; }\n      #example-page aside li a {\n        color: #333333;\n        font-weight: 700;\n        text-decoration: none; }\n  #example-page section.content {\n    padding: 16px;\n    flex: 1;\n    overflow: auto;\n    max-height: 100%;\n    position: relative; }\n    #example-page section.content header {\n      display: flex;\n      background-color: #E0E0E0;\n      border-bottom: 1px solid #666666;\n      padding: 16px;\n      margin: -16px -16px 16px -16px; }\n      #example-page section.content header h1 {\n        margin: 0;\n        flex: 1; }\n      #example-page section.content header button {\n        display: block;\n        width: 24px;\n        height: 24px;\n        background-color: transparent;\n        border: 3px solid #666666;\n        border-radius: 12px;\n        font-style: italic;\n        font-weight: 700;\n        padding-right: 2px;\n        outline: none !important; }\n    #example-page section.content h1 {\n      margin: 16px 0 32px; }\n    #example-page section.content article {\n      background-color: #fff;\n      padding: 16px;\n      margin-bottom: 16px; }\n      #example-page section.content article h2 {\n        font-size: 1.25em;\n        line-height: 2em;\n        border-bottom: 1px solid #F0F0F0;\n        margin-bottom: 8px; }\n",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var o=(a=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),r=n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"});return[i].concat(r).concat([o]).join("\n")}var a;return[i].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+i+"}":i}).join("")},t.i=function(e,i){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var r=this[o][0];"number"==typeof r&&(n[r]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&n[a[0]]||(i&&!a[2]?a[2]=i:i&&(a[2]="("+a[2]+") and ("+i+")"),t.push(a))}},t}},"./node_modules/popper.js/dist/esm/popper.js":function(e,t,i){"use strict";i.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var i="undefined"!=typeof window&&"undefined"!=typeof document,n=["Edge","Trident","Firefox"],o=0,r=0;r<n.length;r+=1)if(i&&navigator.userAgent.indexOf(n[r])>=0){o=1;break}var a=i&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function u(e,t){if(1!==e.nodeType)return[];var i=getComputedStyle(e,null);return t?i[t]:i}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=u(e),i=t.overflow,n=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(i+o+n)?e:l(p(e))}var d=i&&!(!window.MSInputMethodContext||!document.documentMode),c=i&&/MSIE 10/.test(navigator.userAgent);function m(e){return 11===e?d:10===e?c:d||c}function f(e){if(!e)return document.documentElement;for(var t=m(10)?document.body:null,i=e.offsetParent;i===t&&e.nextElementSibling;)i=(e=e.nextElementSibling).offsetParent;var n=i&&i.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(i.nodeName)&&"static"===u(i,"position")?f(i):i:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var i=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?e:t,o=i?t:e,r=document.createRange();r.setStart(n,0),r.setEnd(o,0);var a,s,u=r.commonAncestorContainer;if(e!==u&&t!==u||n.contains(o))return"BODY"===(s=(a=u).nodeName)||"HTML"!==s&&f(a.firstElementChild)!==a?f(u):u;var p=h(e);return p.host?g(p.host,t):g(e,h(t).host)}function b(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var n=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||n)[t]}return e[t]}function v(e,t){var i="x"===t?"Left":"Top",n="Left"===i?"Right":"Bottom";return parseFloat(e["border"+i+"Width"],10)+parseFloat(e["border"+n+"Width"],10)}function x(e,t,i,n){return Math.max(t["offset"+e],t["scroll"+e],i["client"+e],i["offset"+e],i["scroll"+e],m(10)?i["offset"+e]+n["margin"+("Height"===e?"Top":"Left")]+n["margin"+("Height"===e?"Bottom":"Right")]:0)}function w(){var e=document.body,t=document.documentElement,i=m(10)&&getComputedStyle(t);return{height:x("Height",e,t,i),width:x("Width",e,t,i)}}var y=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},E=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),q=function(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e},I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e};function S(e){return I({},e,{right:e.left+e.width,bottom:e.top+e.height})}function P(e){var t={};try{if(m(10)){t=e.getBoundingClientRect();var i=b(e,"top"),n=b(e,"left");t.top+=i,t.left+=n,t.bottom+=i,t.right+=n}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},r="HTML"===e.nodeName?w():{},a=r.width||e.clientWidth||o.right-o.left,s=r.height||e.clientHeight||o.bottom-o.top,p=e.offsetWidth-a,l=e.offsetHeight-s;if(p||l){var d=u(e);p-=v(d,"x"),l-=v(d,"y"),o.width-=p,o.height-=l}return S(o)}function k(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=m(10),o="HTML"===t.nodeName,r=P(e),a=P(t),s=l(e),p=u(t),d=parseFloat(p.borderTopWidth,10),c=parseFloat(p.borderLeftWidth,10);i&&"HTML"===t.nodeName&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var f=S({top:r.top-a.top-d,left:r.left-a.left-c,width:r.width,height:r.height});if(f.marginTop=0,f.marginLeft=0,!n&&o){var h=parseFloat(p.marginTop,10),g=parseFloat(p.marginLeft,10);f.top-=d-h,f.bottom-=d-h,f.left-=c-g,f.right-=c-g,f.marginTop=h,f.marginLeft=g}return(n&&!i?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(f=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=b(t,"top"),o=b(t,"left"),r=i?-1:1;return e.top+=n*r,e.bottom+=n*r,e.left+=o*r,e.right+=o*r,e}(f,t)),f}function C(e){if(!e||!e.parentElement||m())return document.documentElement;for(var t=e.parentElement;t&&"none"===u(t,"transform");)t=t.parentElement;return t||document.documentElement}function G(e,t,i,n){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r={top:0,left:0},a=o?C(e):g(e,t);if("viewport"===n)r=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=e.ownerDocument.documentElement,n=k(e,i),o=Math.max(i.clientWidth,window.innerWidth||0),r=Math.max(i.clientHeight,window.innerHeight||0),a=t?0:b(i),s=t?0:b(i,"left");return S({top:a-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:o,height:r})}(a,o);else{var s=void 0;"scrollParent"===n?"BODY"===(s=l(p(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===n?e.ownerDocument.documentElement:n;var d=k(s,a,o);if("HTML"!==s.nodeName||function e(t){var i=t.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===u(t,"position")||e(p(t)))}(a))r=d;else{var c=w(),m=c.height,f=c.width;r.top+=d.top-d.marginTop,r.bottom=m+d.top,r.left+=d.left-d.marginLeft,r.right=f+d.left}}return r.left+=i,r.top+=i,r.right-=i,r.bottom-=i,r}function O(e,t,i,n,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=G(i,n,r,o),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(s).map(function(e){return I({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),p=u.filter(function(e){var t=e.width,n=e.height;return t>=i.clientWidth&&n>=i.clientHeight}),l=p.length>0?p[0].key:u[0].key,d=e.split("-")[1];return l+(d?"-"+d:"")}function L(e,t,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return k(i,n?C(t):g(t,i),n)}function M(e){var t=getComputedStyle(e),i=parseFloat(t.marginTop)+parseFloat(t.marginBottom),n=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+n,height:e.offsetHeight+i}}function F(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function N(e,t,i){i=i.split("-")[0];var n=M(e),o={width:n.width,height:n.height},r=-1!==["right","left"].indexOf(i),a=r?"top":"left",s=r?"left":"top",u=r?"height":"width",p=r?"width":"height";return o[a]=t[a]+t[u]/2-n[u]/2,o[s]=i===s?t[s]-n[p]:t[F(s)],o}function T(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function _(e,t,i){return(void 0===i?e:e.slice(0,function(e,t,i){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===i});var n=T(e,function(e){return e[t]===i});return e.indexOf(n)}(e,"name",i))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=e.function||e.fn;e.enabled&&s(i)&&(t.offsets.popper=S(t.offsets.popper),t.offsets.reference=S(t.offsets.reference),t=i(t,e))}),t}function j(e,t){return e.some(function(e){var i=e.name;return e.enabled&&i===t})}function A(e){for(var t=[!1,"ms","Webkit","Moz","O"],i=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length;n++){var o=t[n],r=o?""+o+i:e;if(void 0!==document.body.style[r])return r}return null}function R(e){var t=e.ownerDocument;return t?t.defaultView:window}function U(e,t,i,n){i.updateBound=n,R(e).addEventListener("resize",i.updateBound,{passive:!0});var o=l(e);return function e(t,i,n,o){var r="BODY"===t.nodeName,a=r?t.ownerDocument.defaultView:t;a.addEventListener(i,n,{passive:!0}),r||e(l(a.parentNode),i,n,o),o.push(a)}(o,"scroll",i.updateBound,i.scrollParents),i.scrollElement=o,i.eventsEnabled=!0,i}function D(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,R(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function B(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function H(e,t){Object.keys(t).forEach(function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&B(t[i])&&(n="px"),e.style[i]=t[i]+n})}function W(e,t,i){var n=T(e,function(e){return e.name===t}),o=!!n&&e.some(function(e){return e.name===i&&e.enabled&&e.order<n.order});if(!o){var r="`"+t+"`",a="`"+i+"`";console.warn(a+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}var X=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],z=X.slice(3);function V(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=z.indexOf(e),n=z.slice(i+1).concat(z.slice(0,i));return t?n.reverse():n}var Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function K(e,t,i,n){var o=[0,0],r=-1!==["right","left"].indexOf(n),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(T(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,p=-1!==s?[a.slice(0,s).concat([a[s].split(u)[0]]),[a[s].split(u)[1]].concat(a.slice(s+1))]:[a];return(p=p.map(function(e,n){var o=(1===n?!r:r)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,i,n){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],a=o[2];if(!r)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=i;break;case"%":case"%r":default:s=n}return S(s)[t]/100*r}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r;return r}(e,o,t,i)})})).forEach(function(e,t){e.forEach(function(i,n){B(i)&&(o[t]+=i*("-"===e[n-1]?-1:1))})}),o}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,i=t.split("-")[0],n=t.split("-")[1];if(n){var o=e.offsets,r=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(i),u=s?"left":"top",p=s?"width":"height",l={start:q({},u,r[u]),end:q({},u,r[u]+r[p]-a[p])};e.offsets.popper=I({},a,l[n])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var i=t.offset,n=e.placement,o=e.offsets,r=o.popper,a=o.reference,s=n.split("-")[0],u=void 0;return u=B(+i)?[+i,0]:K(i,r,a,s),"left"===s?(r.top+=u[0],r.left-=u[1]):"right"===s?(r.top+=u[0],r.left+=u[1]):"top"===s?(r.left+=u[0],r.top-=u[1]):"bottom"===s&&(r.left+=u[0],r.top+=u[1]),e.popper=r,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var i=t.boundariesElement||f(e.instance.popper);e.instance.reference===i&&(i=f(i));var n=A("transform"),o=e.instance.popper.style,r=o.top,a=o.left,s=o[n];o.top="",o.left="",o[n]="";var u=G(e.instance.popper,e.instance.reference,t.padding,i,e.positionFixed);o.top=r,o.left=a,o[n]=s,t.boundaries=u;var p=t.priority,l=e.offsets.popper,d={primary:function(e){var i=l[e];return l[e]<u[e]&&!t.escapeWithReference&&(i=Math.max(l[e],u[e])),q({},e,i)},secondary:function(e){var i="right"===e?"left":"top",n=l[i];return l[e]>u[e]&&!t.escapeWithReference&&(n=Math.min(l[i],u[e]-("right"===e?l.width:l.height))),q({},i,n)}};return p.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";l=I({},l,d[t](e))}),e.offsets.popper=l,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,i=t.popper,n=t.reference,o=e.placement.split("-")[0],r=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",u=a?"left":"top",p=a?"width":"height";return i[s]<r(n[u])&&(e.offsets.popper[u]=r(n[u])-i[p]),i[u]>r(n[s])&&(e.offsets.popper[u]=r(n[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var i;if(!W(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],r=e.offsets,a=r.popper,s=r.reference,p=-1!==["left","right"].indexOf(o),l=p?"height":"width",d=p?"Top":"Left",c=d.toLowerCase(),m=p?"left":"top",f=p?"bottom":"right",h=M(n)[l];s[f]-h<a[c]&&(e.offsets.popper[c]-=a[c]-(s[f]-h)),s[c]+h>a[f]&&(e.offsets.popper[c]+=s[c]+h-a[f]),e.offsets.popper=S(e.offsets.popper);var g=s[c]+s[l]/2-h/2,b=u(e.instance.popper),v=parseFloat(b["margin"+d],10),x=parseFloat(b["border"+d+"Width"],10),w=g-e.offsets.popper[c]-v-x;return w=Math.max(Math.min(a[l]-h,w),0),e.arrowElement=n,e.offsets.arrow=(q(i={},c,Math.round(w)),q(i,m,""),i),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(j(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var i=G(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),n=e.placement.split("-")[0],o=F(n),r=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case Y.FLIP:a=[n,o];break;case Y.CLOCKWISE:a=V(n);break;case Y.COUNTERCLOCKWISE:a=V(n,!0);break;default:a=t.behavior}return a.forEach(function(s,u){if(n!==s||a.length===u+1)return e;n=e.placement.split("-")[0],o=F(n);var p=e.offsets.popper,l=e.offsets.reference,d=Math.floor,c="left"===n&&d(p.right)>d(l.left)||"right"===n&&d(p.left)<d(l.right)||"top"===n&&d(p.bottom)>d(l.top)||"bottom"===n&&d(p.top)<d(l.bottom),m=d(p.left)<d(i.left),f=d(p.right)>d(i.right),h=d(p.top)<d(i.top),g=d(p.bottom)>d(i.bottom),b="left"===n&&m||"right"===n&&f||"top"===n&&h||"bottom"===n&&g,v=-1!==["top","bottom"].indexOf(n),x=!!t.flipVariations&&(v&&"start"===r&&m||v&&"end"===r&&f||!v&&"start"===r&&h||!v&&"end"===r&&g);(c||b||x)&&(e.flipped=!0,(c||b)&&(n=a[u+1]),x&&(r=function(e){return"end"===e?"start":"start"===e?"end":e}(r)),e.placement=n+(r?"-"+r:""),e.offsets.popper=I({},e.offsets.popper,N(e.instance.popper,e.offsets.reference,e.placement)),e=_(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,i=t.split("-")[0],n=e.offsets,o=n.popper,r=n.reference,a=-1!==["left","right"].indexOf(i),s=-1===["top","left"].indexOf(i);return o[a?"left":"top"]=r[i]-(s?o[a?"width":"height"]:0),e.placement=F(t),e.offsets.popper=S(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!W(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,i=T(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<i.top||t.left>i.right||t.top>i.bottom||t.right<i.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var i=t.x,n=t.y,o=e.offsets.popper,r=T(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==r?r:t.gpuAcceleration,s=P(f(e.instance.popper)),u={position:o.position},p={left:Math.floor(o.left),top:Math.round(o.top),bottom:Math.round(o.bottom),right:Math.floor(o.right)},l="bottom"===i?"top":"bottom",d="right"===n?"left":"right",c=A("transform"),m=void 0,h=void 0;if(h="bottom"===l?-s.height+p.bottom:p.top,m="right"===d?-s.width+p.right:p.left,a&&c)u[c]="translate3d("+m+"px, "+h+"px, 0)",u[l]=0,u[d]=0,u.willChange="transform";else{var g="bottom"===l?-1:1,b="right"===d?-1:1;u[l]=h*g,u[d]=m*b,u.willChange=l+", "+d}var v={"x-placement":e.placement};return e.attributes=I({},v,e.attributes),e.styles=I({},u,e.styles),e.arrowStyles=I({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,i;return H(e.instance.popper,e.styles),t=e.instance.popper,i=e.attributes,Object.keys(i).forEach(function(e){!1!==i[e]?t.setAttribute(e,i[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&H(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,i,n,o){var r=L(o,t,e,i.positionFixed),a=O(i.placement,r,t,e,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return t.setAttribute("x-placement",a),H(t,{position:i.positionFixed?"fixed":"absolute"}),i},gpuAcceleration:void 0}}},$=function(){function e(t,i){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};y(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=a(this.update.bind(this)),this.options=I({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(I({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){n.options.modifiers[t]=I({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return I({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return E(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=L(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=N(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=_(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[A("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return D.call(this)}}]),e}();$.Utils=("undefined"!=typeof window?window:e).PopperUtils,$.placements=X,$.Defaults=Q,t.default=$}.call(this,i("./node_modules/webpack/buildin/global.js"))},"./node_modules/style-loader/lib/addStyles.js":function(e,t,i){var n,o,r={},a=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var i=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),u=null,p=0,l=[],d=i("./node_modules/style-loader/lib/urls.js");function c(e,t){for(var i=0;i<e.length;i++){var n=e[i],o=r[n.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](n.parts[a]);for(;a<n.parts.length;a++)o.parts.push(v(n.parts[a],t))}else{var s=[];for(a=0;a<n.parts.length;a++)s.push(v(n.parts[a],t));r[n.id]={id:n.id,refs:1,parts:s}}}}function m(e,t){for(var i=[],n={},o=0;o<e.length;o++){var r=e[o],a=t.base?r[0]+t.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};n[a]?n[a].parts.push(s):i.push(n[a]={id:a,parts:[s]})}return i}function f(e,t){var i=s(e.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=l[l.length-1];if("top"===e.insertAt)n?n.nextSibling?i.insertBefore(t,n.nextSibling):i.appendChild(t):i.insertBefore(t,i.firstChild),l.push(t);else if("bottom"===e.insertAt)i.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);i.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function g(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),b(t,e.attrs),f(e,t),t}function b(e,t){Object.keys(t).forEach(function(i){e.setAttribute(i,t[i])})}function v(e,t){var i,n,o,r;if(t.transform&&e.css){if(!(r=t.transform(e.css)))return function(){};e.css=r}if(t.singleton){var a=p++;i=u||(u=g(t)),n=y.bind(null,i,a,!1),o=y.bind(null,i,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),f(e,t),t}(t),n=function(e,t,i){var n=i.css,o=i.sourceMap,r=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||r)&&(n=d(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([n],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,i,t),o=function(){h(i),i.href&&URL.revokeObjectURL(i.href)}):(i=g(t),n=function(e,t){var i=t.css,n=t.media;n&&e.setAttribute("media",n);if(e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}.bind(null,i),o=function(){h(i)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var i=m(e,t);return c(i,t),function(e){for(var n=[],o=0;o<i.length;o++){var a=i[o];(s=r[a.id]).refs--,n.push(s)}e&&c(m(e,t),t);for(o=0;o<n.length;o++){var s;if(0===(s=n[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete r[s.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function y(e,t,i,n){var o=i?"":n.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var i=t.protocol+"//"+t.host,n=i+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(o=0===r.indexOf("//")?r:0===r.indexOf("/")?i+r:n+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./node_modules/webpack/buildin/global.js":function(e,t){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(i=window)}e.exports=i},"./src/GUI/ButtonGUI.ts":function(e,t,i){"use strict";t.__esModule=!0;var n=i("./src/PageGuide.ts"),o=function(){function e(e){var t=this;this.position="absolute",this.top=32,this.right=32,this.bottom="initial",this.left="initial",this.content="i",this.style={"padding-right":"2px"},void 0!==e&&Object.keys(e).forEach(function(i){return t[i]=e[i]}),this.markup=document.createElement("button"),this.markup.innerHTML=this.content,this.markup.classList.add(n.PageGuide.CSS_PREFIX+"-button-start"),this.markup.style.position=this.position,this.markup.style.top=this.toStyleString(this.top),this.markup.style.right=this.toStyleString(this.right),this.markup.style.bottom=this.toStyleString(this.bottom),this.markup.style.left=this.toStyleString(this.left),Object.keys(this.style).forEach(function(e){return t.markup.style.setProperty(e,t.style[e])})}return e.prototype.toStyleString=function(e){return"number"==typeof e?e+"px":e},e}();t.ButtonGUI=o},"./src/GUI/PageGuideGUI.ts":function(e,t,i){"use strict";t.__esModule=!0;var n=i("./src/PageGuide.ts"),o=i("./src/GUI/ButtonGUI.ts"),r=function(){function e(e){void 0===e&&(e=!0),this.buttonDefinition=e,this.canvas=document.createElement("canvas"),this.canvas.className=n.PageGuide.CSS_PREFIX+"-backdrop",this.ctx=this.canvas.getContext("2d"),document.body.appendChild(this.canvas),this.buttonDefinition&&(!0===this.buttonDefinition?this.btnStart=new o.ButtonGUI:this.btnStart=new o.ButtonGUI(this.buttonDefinition),document.body.appendChild(this.btnStart.markup))}return e.prototype.onStart=function(e){this.btnStart.markup.onclick=e},e.prototype.onEnd=function(e){this.canvas.onclick=e},e.prototype.start=function(){this.targets=void 0,this.update(),this.canvas.style.display="block",this.canvas.classList.add("active")},e.prototype.update=function(){if(this.renderBackdrop(),void 0!==this.targets)for(var e=0;e<this.targets.length;e++){var t=this.targets.item(e).getBoundingClientRect();this.ctx.clearRect(t.left,t.top,t.width,t.height)}},e.prototype.stop=function(){var e=this;this.canvas.classList.remove("active"),setTimeout(function(){return e.canvas.style.display=""},500)},e.prototype.highlight=function(e){this.targets=e,this.update()},e.prototype.renderBackdrop=function(){var e=window.innerWidth,t=window.innerHeight;this.canvas.setAttribute("width",e+"px"),this.canvas.setAttribute("height",t+"px");var i=this.ctx.createRadialGradient(e/2,t/2,0,e/2,t/2,Math.max(e,t));i.addColorStop(0,"rgba(0,0,0,0.5)"),i.addColorStop(1,"rgba(0,0,0,0.85)"),this.ctx.clearRect(0,0,e,t),this.ctx.fillStyle=i,this.ctx.fillRect(0,0,e,t)},e}();t.PageGuideGui=r},"./src/GUI/PageGuideItemGUI.ts":function(e,t,i){"use strict";t.__esModule=!0;var n=i("./src/PageGuideItem.ts"),o=i("./src/PageGuide.ts"),r=i("./node_modules/popper.js/dist/esm/popper.js"),a=function(){function e(e){this.pageGuideItem=e,this.popperShifts={top:["bottom","left","right"],right:["left","top","bottom"],bottom:["top","left","right"],left:["right","top","bottom"]},this.markup=document.createElement("article"),this.btnExit=document.createElement("button"),this.btnPrevious=document.createElement("button"),this.btnNext=document.createElement("button"),this.buttons=document.createElement("section"),this.content=document.createElement("section"),this.title=document.createElement("h1"),this.counter=document.createElement("section"),this.arrow=document.createElement("div"),this.markup.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX,this.arrow.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-arrow",this.content.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-content",this.counter.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-counter",this.buttons.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-buttons",this.btnExit.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-button "+o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-button-exit",this.btnPrevious.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-button "+o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-button-previous",this.btnNext.className=o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-button "+o.PageGuide.CSS_PREFIX+"-"+n.PageGuideItem.CSS_PREFIX+"-button-next",this.buttons.appendChild(this.btnPrevious),this.buttons.appendChild(this.btnNext),this.markup.appendChild(this.arrow),this.markup.appendChild(this.btnExit),this.markup.appendChild(this.title),this.markup.appendChild(this.counter),this.markup.appendChild(this.content),this.markup.appendChild(this.buttons),this.title.innerHTML=this.pageGuideItem.title,this.content.innerHTML=this.pageGuideItem.content,this.btnExit.innerHTML="&times;",this.btnPrevious.innerHTML="&laquo;",this.btnNext.innerHTML="&raquo;",this.counter.innerHTML=this.pageGuideItem.index+1+" / "+this.pageGuideItem.collentionLength,0===this.pageGuideItem.index&&this.btnPrevious.setAttribute("disabled","disabled"),this.pageGuideItem.index===this.pageGuideItem.collentionLength-1&&this.btnNext.setAttribute("disabled","disabled")}return e.prototype.position=function(){var e=this.markup.getBoundingClientRect(),t=(e.left,e.width,e.top,e.height,0),i=0,n=this.pageGuideItem.position;if(this.arrow.style.top="",this.arrow.style.right="",this.arrow.style.bottom="",this.arrow.style.left="",void 0===this.pageGuideItem.targets||0===this.pageGuideItem.targets.length||"center"===n)t=(window.innerWidth-e.width)/2,i=(window.innerHeight-e.height)/2,this.pageGuideItem.position="center",this.markup.setAttribute("x-placement",this.pageGuideItem.position),this.markup.style.left=(t>>0)+"px",this.markup.style.top=(i>>0)+"px";else{var o=this.pageGuideItem.targets[0];o.getBoundingClientRect();this.popper=new r.default(o,this.markup,{placement:n,modifiers:{arrow:{element:this.arrow},flip:{behavior:this.popperShifts[n]}}})}},e.prototype.update=function(){void 0!==this.popper?this.popper.update():this.position()},e.prototype.onExit=function(e){this.btnExit.onclick=e},e.prototype.onPrevious=function(e){this.btnPrevious.onclick=e},e.prototype.onNext=function(e){this.btnNext.onclick=e},e}();t.PageGuideItemGUI=a},"./src/PageGuide.scss":function(e,t,i){var n=i("./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/PageGuide.scss");"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};i("./node_modules/style-loader/lib/addStyles.js")(n,o);n.locals&&(e.exports=n.locals)},"./src/PageGuide.ts":function(e,t,i){"use strict";t.__esModule=!0;var n=i("./src/PageGuideItem.ts"),o=i("./src/GUI/PageGuideGUI.ts");i("./src/PageGuide.scss");var r=function(){function e(e,t){void 0===t&&(t=!0);var i=this;this.isActive=!1,this.activeIndex=0,this.gui=new o.PageGuideGui(t),this.items=e.filter(function(e){return void 0===e.element||document.querySelectorAll(e.element).length>0}).map(function(e,t,o){var r=new n.PageGuideItem(e.content,t,o.length,e.element,e.title,e.position);return r.onExit(function(){i.stop()}),r.onPrevious(function(){i.activeIndex--,i.step()}),r.onNext(function(){i.activeIndex++,i.step()}),r}),!1!==t&&this.gui.onStart(function(){return i.start()}),this.gui.onEnd(function(){return i.stop()}),window.onkeydown=function(e){if(!(!i.isActive||e.altKey||e.shiftKey||e.ctrlKey||e.metaKey))switch(e.key){case"ArrowUp":case"Up":case"ArrowLeft":case"Left":i.activeIndex--,i.step(),e.preventDefault();break;case"ArrowDown":case"Down":case"ArrowRight":case"Right":case"Enter":i.activeIndex++,i.step(),e.preventDefault();break;case"Escape":case"Esc":i.stop(),e.preventDefault()}},window.onresize=function(e){i.isActive&&(i.gui.update(),void 0!==i.activeItem&&i.activeItem.update())}}return e.prototype.start=function(){this.isActive=!0,this.gui.start(),this.step(),void 0!==this.onStartCallback&&this.onStartCallback()},e.prototype.step=function(e){var t=this;if(void 0!==e&&e>=0&&e<=this.items.length-1&&(this.activeIndex=e),void 0!==this.activeItem&&this.cleanActiveItem(),this.activeIndex<0||this.activeIndex>=this.items.length)return this.stop();this.activeItem=this.items[this.activeIndex],this.activeItem.draw(function(){t.gui.highlight(t.activeItem.targets)})},e.prototype.cleanActiveItem=function(){void 0!==this.activeItem&&(this.activeItem.cleanup(),this.activeItem=void 0)},e.prototype.stop=function(){this.isActive=!1,this.gui.stop(),this.cleanActiveItem(),this.activeIndex=0,void 0!==this.onEndCallback&&this.onEndCallback()},e.prototype.onStart=function(e){this.onStartCallback=e},e.prototype.onEnd=function(e){this.onEndCallback=e},e.CSS_PREFIX="page-guide",e}();t.PageGuide=r},"./src/PageGuideItem.ts":function(e,t,i){"use strict";t.__esModule=!0;var n=i("./src/GUI/PageGuideItemGUI.ts"),o=function(){function e(e,t,i,o,r,a){void 0===r&&(r=""),void 0===a&&(a="bottom"),this.content=e,this.index=t,this.collentionLength=i,this.element=o,this.title=r,this.position=a,void 0!==this.element&&""!==this.element&&(this.targets=document.querySelectorAll(this.element)),this.gui=new n.PageGuideItemGUI(this)}return e.prototype.draw=function(e){var t=this;void 0!==this.targets&&0===this.targets.length||(void 0!==this.targets&&this.targets.length>0&&this.targets[0].scrollIntoView({block:"center",inline:"nearest"}),setTimeout(function(){document.body.appendChild(t.gui.markup),t.gui.position(),e()},0))},e.prototype.cleanup=function(){document.body.removeChild(this.gui.markup)},e.prototype.update=function(){this.gui.update()},e.prototype.onExit=function(e){this.gui.onExit(e)},e.prototype.onPrevious=function(e){this.gui.onPrevious(e)},e.prototype.onNext=function(e){this.gui.onNext(e)},e.CSS_PREFIX="item",e}();t.PageGuideItem=o},"./src/example/example-data.ts":function(e,t,i){"use strict";t.__esModule=!0,t.exampleData=[{title:"Diligentia Uitgeverij &mdash; PageGuide",content:"<p>This is an example of our PageGuide, and why we created another introduction library.</p>"},{title:"Diligentia Uitgeverij &mdash; PageGuide",content:"\n\t\t<p>Our applications usualy consist of nested containers, some are positioned absolute others fixed or relative.</p>\n\t\t<p>Most of the introduction libraries I've found were based on Z-index. This works great, if you're not writing an \n\t\tapp where you already use z-indexes on containers and their children.<br>\n\t\tIn other words, none of them worked for our specific case.</p>"},{title:"Diligentia Uitgeverij &mdash; PageGuide",content:"<p>So, how does our guide work? Well, we don't rely on z-indexes, but our overlay is a canvas. We simply \n\t\tcut out a shape to show the highlighted element.<br>\n\t\tOur pop-over with all the content is then placed on top of all this.</p>"},{title:"Diligentia Uitgeverij &mdash; PageGuide",content:"<p>This has some great caveats. For instance we can easily hightlight multiple elements at the same time.\n\t\tAnother caveat is that we can define shapes to highlight quite easily.</p>"},{title:"Single Element",content:"<p>This is how we highlight a single element by default. No shape or position has been defined.</p>",element:"header"},{title:"Single Element, positioned <code>right</code>",content:"<p>This is how we highlight a single element by default. No shape has been defined, but we've now positioned it on the right hand side</p>",element:"ul",position:"right"},{title:"Multiple Elements, positioned <code>right</code>",content:"<p>This is how we highlight multiple elements by default. No shape has been defined, but we've now positioned it on the top side</p>",element:"li",position:"right"},{title:"Single Element, positioned <code>top</code>",content:"<p>This is how we highlight a single element by default. No shape has been defined, but we've now positioned it on the right hand side</p>",element:"#article-2",position:"top"},{title:"Single Element, positioned <code>top</code>",content:"<p>This is how we highlight a single element by default. No shape has been defined, but we've now positioned it on the right hand side</p>",element:"#article-4",position:"top"},{title:"Multiple Elements, positioned <code>bottom</code>",content:"<p>This is how we highlight a single element by default. No shape has been defined, but we've now positioned it on the bottom side</p>",element:"article h2",position:"bottom"}]},"./src/example/example-page.scss":function(e,t,i){var n=i("./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/example/example-page.scss");"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};i("./node_modules/style-loader/lib/addStyles.js")(n,o);n.locals&&(e.exports=n.locals)},"./src/example/example-page.ts":function(e,t,i){"use strict";t.__esModule=!0,t.examplePage='\n<div id="example-page">\n    <div class="container">\n        <aside class="menu">\n            <ul>\n                <li id="menu-item-1"><a href="#article-1">menu item 1</a></li>\n                <li id="menu-item-2"><a href="#article-2">menu item 2</a></li>\n                <li id="menu-item-3"><a href="#article-3">menu item 3</a></li>\n                <li id="menu-item-4"><a href="#article-4">menu item 4</a></li>\n                <li id="menu-item-5"><a href="#article-5">menu item 5</a></li>\n            </ul>\n        </aside>\n        <section class="content">\n            <header>\n                <h1>Diligentia Uitgeverij &mdash; PageGuide</h1>\n                <button id="btn-start-tour">i</button>\n            </header>\n            <h1>Content</h1>\n            <article id="article-1">\n                <h2>Article 1</h2>\n                <p>\n                <span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Incidunt repellat provident dolorem vero rerum, dicta temporibus nesciunt officiis nulla harum sint exercitationem inventore reiciendis, voluptatum quos. Blanditiis dolorem nobis veritatis.</span>\n                <span>Tempore iusto, explicabo placeat sunt repellendus cum rem aspernatur optio veniam est voluptas ipsum. Unde ducimus dolorem, asperiores quo itaque provident, voluptas magnam, eaque tenetur aut ullam corrupti dolorum explicabo?</span>\n                <span>Tempora laudantium recusandae mollitia, odit alias corporis quaerat, distinctio adipisci quia exercitationem dicta, incidunt repudiandae iste? Delectus nostrum aliquid deserunt autem tempore quasi corporis. Doloremque alias expedita omnis reprehenderit mollitia!</span>\n                </p>\n                <p>\n                <span>Eveniet sunt enim aut assumenda sit voluptatem recusandae a accusamus, et adipisci tempora, perspiciatis placeat quo, veritatis dignissimos voluptatibus repellendus quam distinctio perferendis modi facilis earum. Mollitia maxime corporis iure.</span>\n                <span>Aliquam iusto corporis fugit, deserunt cum assumenda minima, animi nostrum temporibus dolorum tenetur expedita vitae? Excepturi non maiores a saepe debitis officia. Enim quis officia id, quae perspiciatis est delectus?</span>\n                <span>Facilis culpa labore nobis? Dolor praesentium sequi, natus dolores doloremque dignissimos. Maiores deleniti amet quia non itaque blanditiis assumenda, consequatur velit nesciunt! Eius, nisi reiciendis! Ipsum a ex at perspiciatis?</span>\n                </p>\n            </article>\n            <article id="article-2">\n                <h2>Article 2</h2>\n                <p>\n                <span>Aliquam repellat voluptates facere fugit provident eos soluta suscipit voluptatibus corrupti similique. Voluptatem natus eos eligendi incidunt quod, ad quas repudiandae! Nisi magni architecto deserunt corrupti sint? Voluptatum, nisi quia?</span>\n                <span>Porro, culpa? Consequuntur vitae nesciunt voluptatum illo, officiis eligendi sed officia temporibus unde sit iusto iure? Corporis ab similique saepe exercitationem animi facilis id. Consequuntur reiciendis corrupti eveniet quidem suscipit.</span>\n                <span>Ea veritatis ab, similique consectetur nemo aperiam ut repellat numquam, laborum ducimus consequuntur iste praesentium nam, excepturi assumenda ullam in est asperiores sequi voluptatum repellendus. Maiores, recusandae est. Praesentium, optio.</span>\n                </p>\n                <p>\n                <span>Assumenda dolores perspiciatis quidem reiciendis a exercitationem, inventore harum blanditiis consequuntur ad libero eligendi amet quam! Laboriosam vitae deleniti corporis minus, quas, fugiat incidunt nulla possimus amet iure, unde facere!</span>\n                <span>Obcaecati quod, natus corporis veniam odio autem sapiente necessitatibus, laboriosam distinctio, nobis perspiciatis maxime amet quidem earum quis ex qui! Fugit molestiae laboriosam dolorum quas neque pariatur, debitis obcaecati laudantium.</span>\n                <span>Explicabo, repudiandae. Quisquam corporis eligendi nihil eum. Similique reprehenderit ea pariatur quaerat minima corrupti, sapiente delectus itaque cumque, temporibus veniam odio? Quod error animi sint pariatur laboriosam accusamus at molestiae?</span>\n                </p>\n            </article>\n            <article id="article-3">\n                <h2>Article 3</h2>\n                <p>\n                <span>Nesciunt quis, praesentium soluta officiis, expedita tempora illum sed quos iste totam maiores in, nostrum temporibus explicabo dolorem aperiam. Illum laboriosam voluptatum omnis! Nam veniam eos magnam recusandae tempora at!</span>\n                <span>Neque ut libero fugiat modi quia earum odit aliquid et pariatur recusandae voluptate aut, at qui placeat in velit ipsa reiciendis exercitationem adipisci nemo, alias inventore ad! Perspiciatis, laudantium qui.</span>\n                <span>Nihil laborum voluptatibus consequuntur numquam reprehenderit doloremque tenetur quidem fuga architecto, inventore dicta magnam et est distinctio labore ab ullam error animi! Sint nisi veniam, ipsum cupiditate architecto corporis a!</span>\n                </p>\n                <p>\n                <span>Facilis architecto odit, temporibus quibusdam nam omnis similique dicta odio ipsam, culpa error sit ducimus? Ut reprehenderit voluptate aut eligendi velit ipsum magnam voluptatem neque a? Blanditiis cumque voluptate temporibus!</span>\n                <span>Ducimus nemo natus minus eius dolor dolores, rem, aliquam amet doloremque doloribus aliquid vel distinctio ratione. Beatae voluptatem soluta, quam quisquam quaerat veritatis veniam. Nobis quisquam facere dolore quidem atque?</span>\n                <span>Officiis recusandae quod corrupti sit. Odio eum rerum doloremque eius iste, sed obcaecati. Quisquam iusto, voluptatem veniam similique itaque nostrum aspernatur quos beatae asperiores debitis est sequi minus rerum provident?</span>\n                </p>\n            </article>\n            <article id="article-4">\n                <h2>Article 4</h2>\n                <p>\n                <span>Reiciendis saepe distinctio fuga soluta pariatur suscipit error itaque cumque quisquam, eos, ea architecto numquam placeat repellat aperiam laboriosam nesciunt repellendus accusamus animi repudiandae quidem nihil sit? Mollitia, omnis aperiam.</span>\n                <span>Impedit rerum corrupti reiciendis asperiores, autem quo atque, reprehenderit tenetur delectus ducimus aperiam suscipit velit voluptate, voluptatum quas quod voluptates. Veniam harum a vero, voluptate incidunt delectus sit molestiae dolor?</span>\n                <span>Porro consectetur officia cum illo eaque possimus ratione qui inventore? Possimus itaque aliquid provident quod, quia praesentium sapiente. Corporis quasi sit animi earum labore dolorum officia non suscipit necessitatibus sequi.</span>\n                </p>\n                <p>\n                <span>Explicabo praesentium iure possimus itaque voluptatem vero magni culpa commodi expedita ipsa, eum nobis incidunt cum excepturi ab aspernatur veniam quia earum est? Sed quis, esse modi iste explicabo quasi!</span>\n                <span>Totam quasi, enim numquam temporibus, mollitia modi eligendi facere architecto quae aliquid quaerat, vel ut. Laboriosam quisquam nesciunt ipsum temporibus quasi, quod possimus obcaecati fugiat molestias, exercitationem rem consequuntur deserunt?</span>\n                <span>Expedita, incidunt ex sunt, perspiciatis beatae dicta optio, culpa animi esse cupiditate itaque repudiandae aperiam. Voluptatem accusantium natus quasi sint doloribus fuga iusto, hic earum. Iste voluptatum quibusdam debitis explicabo!</span>\n                </p>\n            </article>\n            <article id="article-5">\n                <h2>Article 5</h2>\n                <p>\n                <span>Soluta id iste recusandae quae officia voluptas quisquam deserunt beatae commodi nulla perferendis pariatur voluptates reprehenderit, saepe vel sed tempore optio! Obcaecati aspernatur eaque id facere aliquid necessitatibus sunt dolores.</span>\n                <span>Assumenda sed voluptates eaque distinctio dolorum sequi quaerat recusandae laboriosam nisi accusamus! Aut perspiciatis, excepturi ex commodi ipsa dolores eligendi sunt at ea molestiae nulla. Hic facere odit aliquid ipsa.</span>\n                <span>Rem beatae ab hic expedita magnam repudiandae fugit libero voluptates nisi. Nisi totam est at perspiciatis neque ut possimus illum ducimus aliquid. Maxime, facere? Quibusdam error vitae harum quidem numquam.</span>\n                </p>\n                <p>\n                <span>Praesentium accusantium nulla earum sit molestias dolore veritatis quaerat aliquid architecto autem ad, non eos maxime. Officiis nam cupiditate nisi optio, repudiandae dignissimos commodi, nihil temporibus laborum cumque praesentium velit.</span>\n                <span>Corrupti magni qui cum unde minima, fuga voluptatibus suscipit incidunt ducimus, temporibus ipsum iusto! Inventore quis impedit ea eaque sapiente facere! Quisquam voluptas dolore quos molestias fugit dicta laudantium saepe?</span>\n                <span>Minima in omnis et dolores deserunt doloribus porro quos architecto laboriosam dolor. Fugiat esse temporibus sapiente voluptatum in. Quia rem nihil cum culpa et repudiandae optio hic nulla facilis molestiae!</span>\n                </p>\n            </article>\n        </section>\n    </div>\n</div>'},"./src/example/example.ts":function(e,t,i){"use strict";t.__esModule=!0,i("./src/example/example-page.scss");var n=i("./src/PageGuide.ts"),o=i("./src/example/example-page.ts"),r=i("./src/example/example-data.ts");!function(){console.clear();var e=document.createElement("article");e.innerHTML=o.examplePage,document.body.appendChild(e.lastChild);var t=new n.PageGuide(r.exampleData,!1),i=document.getElementById("btn-start-tour");i.onclick=function(){t.start()},t.onEnd(function(){i.scrollIntoView({})})}()}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9QYWdlR3VpZGUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1BhZ2VHdWlkZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9QYWdlR3VpZGUvLi9zcmMvUGFnZUd1aWRlLnNjc3MiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL2V4YW1wbGUvZXhhbXBsZS1wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovL1BhZ2VHdWlkZS8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovL1BhZ2VHdWlkZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9QYWdlR3VpZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovL1BhZ2VHdWlkZS8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL0dVSS9CdXR0b25HVUkudHMiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL0dVSS9QYWdlR3VpZGVHVUkudHMiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL0dVSS9QYWdlR3VpZGVJdGVtR1VJLnRzIiwid2VicGFjazovL1BhZ2VHdWlkZS8uL3NyYy9QYWdlR3VpZGUuc2Nzcz81M2NjIiwid2VicGFjazovL1BhZ2VHdWlkZS8uL3NyYy9QYWdlR3VpZGUudHMiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL1BhZ2VHdWlkZUl0ZW0udHMiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL2V4YW1wbGUvZXhhbXBsZS1kYXRhLnRzIiwid2VicGFjazovL1BhZ2VHdWlkZS8uL3NyYy9leGFtcGxlL2V4YW1wbGUtcGFnZS5zY3NzP2Q2YWUiLCJ3ZWJwYWNrOi8vUGFnZUd1aWRlLy4vc3JjL2V4YW1wbGUvZXhhbXBsZS1wYWdlLnRzIiwid2VicGFjazovL1BhZ2VHdWlkZS8uL3NyYy9leGFtcGxlL2V4YW1wbGUudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicHVzaCIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsImdsb2JhbCIsImlzQnJvd3NlciIsImRvY3VtZW50IiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImRlYm91bmNlIiwiUHJvbWlzZSIsImZuIiwiY2FsbGVkIiwicmVzb2x2ZSIsInRoZW4iLCJzY2hlZHVsZWQiLCJzZXRUaW1lb3V0IiwiaXNGdW5jdGlvbiIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImVsZW1lbnQiLCJub2RlVHlwZSIsImNzcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQYXJlbnROb2RlIiwibm9kZU5hbWUiLCJwYXJlbnROb2RlIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsImJvZHkiLCJvd25lckRvY3VtZW50IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJpc0lFIiwidmVyc2lvbiIsImdldE9mZnNldFBhcmVudCIsImRvY3VtZW50RWxlbWVudCIsIm5vT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsIm5vZGUiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIm9yZGVyIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwic3RhcnQiLCJlbmQiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImNvbnRhaW5zIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJodG1sIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJwYXJzZUZsb2F0IiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJNYXRoIiwibWF4IiwiZ2V0V2luZG93U2l6ZXMiLCJoZWlnaHQiLCJ3aWR0aCIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib2JqIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsInJpZ2h0IiwibGVmdCIsImJvdHRvbSIsInRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZSIsInJlc3VsdCIsInNpemVzIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJob3JpelNjcm9sbGJhciIsIm9mZnNldFdpZHRoIiwidmVydFNjcm9sbGJhciIsIm9mZnNldEhlaWdodCIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImNoaWxkcmVuIiwicGFyZW50IiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZWwiLCJnZXRCb3VuZGFyaWVzIiwicG9wcGVyIiwicmVmZXJlbmNlIiwicGFkZGluZyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllcyIsImV4Y2x1ZGVTY3JvbGwiLCJyZWxhdGl2ZU9mZnNldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImJvdW5kYXJpZXNOb2RlIiwiaXNGaXhlZCIsIl9nZXRXaW5kb3dTaXplcyIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVmUmVjdCIsInJlY3RzIiwic29ydGVkQXJlYXMiLCJrZXlzIiwiYXJlYSIsIl9yZWYiLCJzb3J0IiwiYSIsImIiLCJmaWx0ZXJlZEFyZWFzIiwiZmlsdGVyIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsInNwbGl0IiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsInN0YXRlIiwiZ2V0T3V0ZXJTaXplcyIsIngiLCJtYXJnaW5Cb3R0b20iLCJ5IiwibWFyZ2luUmlnaHQiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImhhc2giLCJyZXBsYWNlIiwibWF0Y2hlZCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsImZpbmQiLCJhcnIiLCJjaGVjayIsIkFycmF5IiwicnVuTW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZGF0YSIsImVuZHMiLCJzbGljZSIsInByb3AiLCJmaW5kSW5kZXgiLCJjdXIiLCJtYXRjaCIsImZvckVhY2giLCJjb25zb2xlIiwid2FybiIsImVuYWJsZWQiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwicHJlZml4IiwidG9DaGVjayIsInN0eWxlIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwib3B0aW9ucyIsInVwZGF0ZUJvdW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiZXZlbnQiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsImluZGV4IiwicmV2ZXJzZSIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicGFyc2VPZmZzZXQiLCJvZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsInRyaW0iLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0Iiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwidHJhbnNmb3JtIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsIm1pbiIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiYXJyb3ciLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImxlbiIsInNpZGVDYXBpdGFsaXplZCIsInRvTG93ZXJDYXNlIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsInJvdW5kIiwiZmxpcCIsImZsaXBwZWQiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJzdGVwIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImF0dHJpYnV0ZXMiLCJjb21wdXRlU3R5bGUiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0IiwicG9zaXRpb24iLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwiYXBwbHlTdHlsZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlBvcHBlciIsIl90aGlzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlIiwiYmluZCIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwianF1ZXJ5IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVDaGlsZCIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJhcHBseSIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiaWR4Iiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsImFkZEF0dHJzIiwicmVtb3ZlIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJnIiwiRnVuY3Rpb24iLCJldmFsIiwiUGFnZUd1aWRlXzEiLCJCdXR0b25HVUkiLCJkdG8iLCJwYWRkaW5nLXJpZ2h0IiwibWFya3VwIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwiYWRkIiwiUGFnZUd1aWRlIiwiQ1NTX1BSRUZJWCIsInRvU3R5bGVTdHJpbmciLCJzZXRQcm9wZXJ0eSIsIkJ1dHRvbkdVSV8xIiwiUGFnZUd1aWRlR3VpIiwiYnV0dG9uRGVmaW5pdGlvbiIsImNhbnZhcyIsImNsYXNzTmFtZSIsImN0eCIsImdldENvbnRleHQiLCJidG5TdGFydCIsIm9uU3RhcnQiLCJvbmNsaWNrIiwib25FbmQiLCJ0YXJnZXRzIiwiZGlzcGxheSIsInJlbmRlckJhY2tkcm9wIiwiZWxlbWVudFJlY3QiLCJjbGVhclJlY3QiLCJzdG9wIiwiaGlnaGxpZ2h0IiwiZWxlbWVudHMiLCJzdGFnZVdpZHRoIiwic3RhZ2VIZWlnaHQiLCJncmFkaWVudCIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJQYWdlR3VpZGVJdGVtXzEiLCJwb3BwZXJfanNfMSIsIlBhZ2VHdWlkZUl0ZW1HVUkiLCJwYWdlR3VpZGVJdGVtIiwicG9wcGVyU2hpZnRzIiwiYnRuRXhpdCIsImJ0blByZXZpb3VzIiwiYnRuTmV4dCIsImJ1dHRvbnMiLCJ0aXRsZSIsIlBhZ2VHdWlkZUl0ZW0iLCJjb2xsZW50aW9uTGVuZ3RoIiwicG9wdXBCb3giLCJvbkV4aXQiLCJvblByZXZpb3VzIiwib25OZXh0IiwiaG1yIiwibG9jYWxzIiwiUGFnZUd1aWRlR1VJXzEiLCJkdG9JdGVtcyIsImlzQWN0aXZlIiwiYWN0aXZlSW5kZXgiLCJndWkiLCJpdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvbmtleWRvd24iLCJldnQiLCJhbHRLZXkiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwicHJldmVudERlZmF1bHQiLCJvbnJlc2l6ZSIsImFjdGl2ZUl0ZW0iLCJvblN0YXJ0Q2FsbGJhY2siLCJjbGVhbkFjdGl2ZUl0ZW0iLCJkcmF3IiwiY2xlYW51cCIsIm9uRW5kQ2FsbGJhY2siLCJjYiIsIlBhZ2VHdWlkZUl0ZW1HVUlfMSIsInNjcm9sbEludG9WaWV3IiwiYmxvY2siLCJpbmxpbmUiLCJleGFtcGxlRGF0YSIsImV4YW1wbGVQYWdlIiwiZXhhbXBsZV9wYWdlXzEiLCJleGFtcGxlX2RhdGFfMSIsImNsZWFyIiwiZXhhbXBsZSIsImxhc3RDaGlsZCIsImd1aWRlIiwiYnRuIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLGVBQUFDLElBQ0FELE9BQUEsZUFBQUgsR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxVQUFBRCxJQUVBRCxFQUFBLFVBQUFDLElBUkEsQ0FTQ0ssT0FBQSxXQUNELG1CQ1RBLElBQUFDLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFQLFFBR0EsSUFBQUMsRUFBQUksRUFBQUUsSUFDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBVCxZQVVBLE9BTkFVLEVBQUFILEdBQUFJLEtBQUFWLEVBQUFELFFBQUFDLElBQUFELFFBQUFNLEdBR0FMLEVBQUFRLEdBQUEsRUFHQVIsRUFBQUQsUUEyQ0EsT0F0Q0FNLEVBQUFNLEVBQUFGLEVBR0FKLEVBQUFPLEVBQUFSLEVBR0FDLEVBQUFRLEVBQUEsU0FBQWQsRUFBQWUsRUFBQUMsR0FDQVYsRUFBQVcsRUFBQWpCLEVBQUFlLElBQ0FHLE9BQUFDLGVBQUFuQixFQUFBZSxHQUNB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QXZDLEVBQUFPLEVBQUFnQyxFQUFBLE1BT0EsSUFBQStPLEdBQWV5UixLQUFBLEVBRWZyTixlQVBBQSxFQVFBcUcsZ0JBQUFoVSxHQUVBMUgsRUFBQSwrQ0FBQUEsQ0FBQWtDLEVBQUErTyxHQUVBL08sRUFBQXlnQixTQUFBaGpCLEVBQUFELFFBQUF3QyxFQUFBeWdCLHNGQ2pCYWpqQixFQUFBNmtCLFlBQWMsbThTQ0EzQnZrQixFQUFBLG1DQUNBLElBQUFvZixFQUFBcGYsRUFBQSxzQkFDQXdrQixFQUFBeGtCLEVBQUEsaUNBQ0F5a0IsRUFBQXprQixFQUFBLGtDQUVBLFdBQ0NnUSxRQUFRMFUsUUFDUixJQUFNQyxFQUFVbmhCLFNBQVMrWSxjQUFjLFdBQ3ZDb0ksRUFBUWxGLFVBQVkrRSxFQUFBRCxZQUNwQi9nQixTQUFTMEIsS0FBSzhXLFlBQVkySSxFQUFRQyxXQUVsQyxJQUFNQyxFQUFRLElBQUl6RixFQUFBUSxVQUFVNkUsRUFBQUgsYUFBYSxHQUNuQ1EsRUFBTXRoQixTQUFTdWhCLGVBQWUsa0JBRXBDRCxFQUFJckUsUUFBVSxXQUFNb0UsRUFBTWhlLFNBRTFCZ2UsRUFBTW5FLE1BQU0sV0FDWG9FLEVBQUlYLHFCQVpOIiwiZmlsZSI6ImV4YW1wbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIlBhZ2VHdWlkZVwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJQYWdlR3VpZGVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiUGFnZUd1aWRlXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2V4YW1wbGUvZXhhbXBsZS50c1wiKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnotZGVwdGgtMSB7XFxuICBib3gtc2hhZG93OiAwIDFweCA0cHggcmdiYSgwLCAwLCAwLCAwLjI0KTsgfVxcblxcbi56LWRlcHRoLTIge1xcbiAgYm94LXNoYWRvdzogMCAzcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMjMpOyB9XFxuXFxuLnotZGVwdGgtMywgLnBhZ2UtZ3VpZGUtYnV0dG9uLXN0YXJ0LCAucGFnZS1ndWlkZS1pdGVtIC5wYWdlLWd1aWRlLWl0ZW0tYnV0dG9uLWV4aXQge1xcbiAgYm94LXNoYWRvdzogMCA2cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMjMpOyB9XFxuXFxuLnotZGVwdGgtNCB7XFxuICBib3gtc2hhZG93OiAwIDEwcHggMThweCByZ2JhKDAsIDAsIDAsIDAuMjIpOyB9XFxuXFxuLnotZGVwdGgtNSwgLnBhZ2UtZ3VpZGUtaXRlbSB7XFxuICBib3gtc2hhZG93OiAwIDE1cHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMjIpOyB9XFxuXFxuLnBhZ2UtZ3VpZGUtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBvcGFjaXR5OiAwO1xcbiAgei1pbmRleDogOTk5OTk5ODtcXG4gIHRyYW5zaXRpb246IGFsbCA0NTBtcyBjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSkgMG1zOyB9XFxuICAucGFnZS1ndWlkZS1iYWNrZHJvcC5hY3RpdmUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuXFxuLnBhZ2UtZ3VpZGUtYnV0dG9uLXN0YXJ0IHtcXG4gIHotaW5kZXg6IDk5OTk5OTg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDNweCBzb2xpZCAjNjY2NjY2O1xcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50OyB9XFxuXFxuLnBhZ2UtZ3VpZGUtaXRlbSB7XFxuICBmb250LWZhbWlseTogJ1VidW50dScsJ0dpbGwgU2FucycsICdHaWxsIFNhbnMgTVQnLCBDYWxpYnJpLCAnVHJlYnVjaGV0IE1TJywgc2Fucy1zZXJpZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDk5OTk5OTk7XFxuICBwYWRkaW5nOiAxNnB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjhGOEY4O1xcbiAgbWluLXdpZHRoOiAyNTZweDtcXG4gIG1heC13aWR0aDogNzY4cHg7XFxuICB3aWR0aDogNTAlO1xcbiAgbWFyZ2luOiAxNnB4O1xcbiAgYm9yZGVyOiBub25lOyB9XFxuICAucGFnZS1ndWlkZS1pdGVtW3gtcGxhY2VtZW50Xj1cXFwiY2VudGVyXFxcIl0ge1xcbiAgICBib3JkZXItdG9wOiA4cHggc29saWQgI2ZmOTkzMzsgfVxcbiAgLnBhZ2UtZ3VpZGUtaXRlbVt4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIHtcXG4gICAgYm9yZGVyLXRvcDogOHB4IHNvbGlkICNmZjk5MzM7IH1cXG4gICAgLnBhZ2UtZ3VpZGUtaXRlbVt4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5wYWdlLWd1aWRlLWl0ZW0tYXJyb3cge1xcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICNmZjk5MzM7XFxuICAgICAgdG9wOiAtMzJweDtcXG4gICAgICBib3R0b206IGluaXRpYWw7XFxuICAgICAgbWFyZ2luLXRvcDogMDtcXG4gICAgICBsZWZ0OiA1MCU7XFxuICAgICAgcmlnaHQ6IGluaXRpYWw7IH1cXG4gIC5wYWdlLWd1aWRlLWl0ZW1beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSB7XFxuICAgIGJvcmRlci1ib3R0b206IDhweCBzb2xpZCAjZmY5OTMzOyB9XFxuICAgIC5wYWdlLWd1aWRlLWl0ZW1beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAucGFnZS1ndWlkZS1pdGVtLWFycm93IHtcXG4gICAgICBib3JkZXItdG9wLWNvbG9yOiAjZmY5OTMzO1xcbiAgICAgIHRvcDogaW5pdGlhbDtcXG4gICAgICBib3R0b206IC0zMnB4O1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICAgICAgbGVmdDogNTAlO1xcbiAgICAgIHJpZ2h0OiBpbml0aWFsOyB9XFxuICAucGFnZS1ndWlkZS1pdGVtW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSB7XFxuICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgI2ZmOTkzMzsgfVxcbiAgICAucGFnZS1ndWlkZS1pdGVtW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAucGFnZS1ndWlkZS1pdGVtLWFycm93IHtcXG4gICAgICBib3JkZXItcmlnaHQtY29sb3I6ICNmZjk5MzM7XFxuICAgICAgbGVmdDogLTMycHg7XFxuICAgICAgcmlnaHQ6IGluaXRpYWw7XFxuICAgICAgYm90dG9tOiBpbml0aWFsO1xcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xcbiAgICAgIHRvcDogNTAlOyB9XFxuICAucGFnZS1ndWlkZS1pdGVtW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIHtcXG4gICAgYm9yZGVyLXJpZ2h0OiA4cHggc29saWQgI2ZmOTkzMzsgfVxcbiAgICAucGFnZS1ndWlkZS1pdGVtW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5wYWdlLWd1aWRlLWl0ZW0tYXJyb3cge1xcbiAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmY5OTMzO1xcbiAgICAgIGxlZnQ6IGluaXRpYWw7XFxuICAgICAgYm90dG9tOiBpbml0aWFsO1xcbiAgICAgIHJpZ2h0OiAtMzJweDtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XFxuICAgICAgdG9wOiA1MCU7IH1cXG4gIC5wYWdlLWd1aWRlLWl0ZW0gLnBhZ2UtZ3VpZGUtaXRlbS1hcnJvdyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAtMTZweDtcXG4gICAgYm9yZGVyOiAxNnB4IHNvbGlkIHRyYW5zcGFyZW50OyB9XFxuICAucGFnZS1ndWlkZS1pdGVtIGgxIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDMycHg7XFxuICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNjY2NjY2OyB9XFxuICAucGFnZS1ndWlkZS1pdGVtIC5wYWdlLWd1aWRlLWl0ZW0tY291bnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAxNnB4O1xcbiAgICByaWdodDogMTZweDtcXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG4gICAgbGluZS1oZWlnaHQ6IDUwcHg7IH1cXG4gIC5wYWdlLWd1aWRlLWl0ZW0gLnBhZ2UtZ3VpZGUtaXRlbS1idXR0b25zIHtcXG4gICAgZGlzcGxheTogZmxleDsgfVxcbiAgICAucGFnZS1ndWlkZS1pdGVtIC5wYWdlLWd1aWRlLWl0ZW0tYnV0dG9ucyAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbiB7XFxuICAgICAgZmxleDogMXB4OyB9XFxuICAgICAgLnBhZ2UtZ3VpZGUtaXRlbSAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbnMgLnBhZ2UtZ3VpZGUtaXRlbS1idXR0b246aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA1KTsgfVxcbiAgICAucGFnZS1ndWlkZS1pdGVtIC5wYWdlLWd1aWRlLWl0ZW0tYnV0dG9ucyAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbi1wcmV2aW91cyB7XFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cXG4gICAgLnBhZ2UtZ3VpZGUtaXRlbSAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbnMgLnBhZ2UtZ3VpZGUtaXRlbS1idXR0b24tbmV4dCB7XFxuICAgICAgdGV4dC1hbGlnbjogbGVmdDsgfVxcbiAgLnBhZ2UtZ3VpZGUtaXRlbSAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbiB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgZm9udC1zaXplOiAzMnB4O1xcbiAgICBvdXRsaW5lOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgdHJhbnNpdGlvbjogYWxsIDQ1MG1zIGN1YmljLWJlemllcigwLjIzLCAxLCAwLjMyLCAxKSAwbXM7IH1cXG4gICAgLnBhZ2UtZ3VpZGUtaXRlbSAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbjpob3ZlciwgLnBhZ2UtZ3VpZGUtaXRlbSAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbjphY3RpdmUsIC5wYWdlLWd1aWRlLWl0ZW0gLnBhZ2UtZ3VpZGUtaXRlbS1idXR0b246Zm9jdXMge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFMEUwRTA7IH1cXG4gICAgLnBhZ2UtZ3VpZGUtaXRlbSAucGFnZS1ndWlkZS1pdGVtLWJ1dHRvbjpkaXNhYmxlZCB7XFxuICAgICAgdmlzaWJpbGl0eTogaGlkZGVuOyB9XFxuICAucGFnZS1ndWlkZS1pdGVtIC5wYWdlLWd1aWRlLWl0ZW0tYnV0dG9uLWV4aXQge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJvdHRvbTogLTE2cHg7XFxuICAgIHJpZ2h0OiAxNnB4O1xcbiAgICB3aWR0aDogMzJweDtcXG4gICAgaGVpZ2h0OiAzMnB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRThFOEU4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGxpbmUtaGVpZ2h0OiAwO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi56LWRlcHRoLTEsICNleGFtcGxlLXBhZ2UgYXNpZGUgbGksICNleGFtcGxlLXBhZ2Ugc2VjdGlvbi5jb250ZW50IGFydGljbGUge1xcbiAgYm94LXNoYWRvdzogMCAxcHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNCk7IH1cXG5cXG4uei1kZXB0aC0yLCAjZXhhbXBsZS1wYWdlIGFzaWRlIHtcXG4gIGJveC1zaGFkb3c6IDAgM3B4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjIzKTsgfVxcblxcbi56LWRlcHRoLTMsICNleGFtcGxlLXBhZ2UgLmNvbnRhaW5lciB7XFxuICBib3gtc2hhZG93OiAwIDZweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yMyk7IH1cXG5cXG4uei1kZXB0aC00IHtcXG4gIGJveC1zaGFkb3c6IDAgMTBweCAxOHB4IHJnYmEoMCwgMCwgMCwgMC4yMik7IH1cXG5cXG4uei1kZXB0aC01IHtcXG4gIGJveC1zaGFkb3c6IDAgMTVweCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4yMik7IH1cXG5cXG4jZXhhbXBsZS1wYWdlIHtcXG4gIGZvbnQtZmFtaWx5OiAnR2lsbCBTYW5zJywgJ0dpbGwgU2FucyBNVCcsIENhbGlicmksICdUcmVidWNoZXQgTVMnLCBzYW5zLXNlcmlmO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcGFkZGluZzogMTZweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzMzMzM7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuICAjZXhhbXBsZS1wYWdlICosXFxuICAjZXhhbXBsZS1wYWdlICo6YmVmb3JlLFxcbiAgI2V4YW1wbGUtcGFnZSAqOmFmdGVyIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwOyB9XFxuICAjZXhhbXBsZS1wYWdlIC5jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjBGMEYwOyB9XFxuICAjZXhhbXBsZS1wYWdlIGFzaWRlIHtcXG4gICAgd2lkdGg6IDE5NnB4O1xcbiAgICBiYWNrZ3JvdW5kOiAjQUJBQkFCO1xcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjNjY2NjY2O1xcbiAgICBwYWRkaW5nOiAxNnB4OyB9XFxuICAgICNleGFtcGxlLXBhZ2UgYXNpZGUgdWwge1xcbiAgICAgIHBhZGRpbmc6IDA7IH1cXG4gICAgI2V4YW1wbGUtcGFnZSBhc2lkZSBsaSB7XFxuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcXG4gICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICBwYWRkaW5nOiA4cHggMTZweDtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDJweDtcXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG4gICAgICAjZXhhbXBsZS1wYWdlIGFzaWRlIGxpIGEge1xcbiAgICAgICAgY29sb3I6ICMzMzMzMzM7XFxuICAgICAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxuICAjZXhhbXBsZS1wYWdlIHNlY3Rpb24uY29udGVudCB7XFxuICAgIHBhZGRpbmc6IDE2cHg7XFxuICAgIGZsZXg6IDE7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG4gICAgI2V4YW1wbGUtcGFnZSBzZWN0aW9uLmNvbnRlbnQgaGVhZGVyIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFMEUwRTA7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM2NjY2NjY7XFxuICAgICAgcGFkZGluZzogMTZweDtcXG4gICAgICBtYXJnaW46IC0xNnB4IC0xNnB4IDE2cHggLTE2cHg7IH1cXG4gICAgICAjZXhhbXBsZS1wYWdlIHNlY3Rpb24uY29udGVudCBoZWFkZXIgaDEge1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgZmxleDogMTsgfVxcbiAgICAgICNleGFtcGxlLXBhZ2Ugc2VjdGlvbi5jb250ZW50IGhlYWRlciBidXR0b24ge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICB3aWR0aDogMjRweDtcXG4gICAgICAgIGhlaWdodDogMjRweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYm9yZGVyOiAzcHggc29saWQgIzY2NjY2NjtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7XFxuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICAgICAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICAgICAgcGFkZGluZy1yaWdodDogMnB4O1xcbiAgICAgICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50OyB9XFxuICAgICNleGFtcGxlLXBhZ2Ugc2VjdGlvbi5jb250ZW50IGgxIHtcXG4gICAgICBtYXJnaW46IDE2cHggMCAzMnB4OyB9XFxuICAgICNleGFtcGxlLXBhZ2Ugc2VjdGlvbi5jb250ZW50IGFydGljbGUge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgICAgcGFkZGluZzogMTZweDtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAxNnB4OyB9XFxuICAgICAgI2V4YW1wbGUtcGFnZSBzZWN0aW9uLmNvbnRlbnQgYXJ0aWNsZSBoMiB7XFxuICAgICAgICBmb250LXNpemU6IDEuMjVlbTtcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyZW07XFxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0YwRjBGMDtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDhweDsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTQuM1xuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IGh0bWxbJ29mZnNldCcgKyBheGlzXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoKSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMoKSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIGJvdW5kYXJpZXMubGVmdCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IHBhZGRpbmc7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3kgdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgb25VcGRhdGUgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgLy8gQXZvaWQgYmx1cnJ5IHRleHQgYnkgdXNpbmcgZnVsbCBwaXhlbCBpbnRlZ2Vycy5cbiAgLy8gRm9yIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcsIHRvcC9ib3R0b20gcHJlZmVycyByb3VuZGVkXG4gIC8vIHZhbHVlcywgd2hpbGUgbGVmdC9yaWdodCBwcmVmZXJzIGZsb29yZWQgdmFsdWVzLlxuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiBNYXRoLmZsb29yKHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IE1hdGgucm91bmQocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiBNYXRoLnJvdW5kKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBNYXRoLmZsb29yKHBvcHBlci5yaWdodClcbiAgfTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVjdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLXJpZ2h0YCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0bGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgaGVpZ2h0LlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gTW9yZSBvbiB0aGlzIFtyZWFkaW5nIHRoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIgdGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgaGFzIGFsd2F5cyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLCBjYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNob3RoZXJzXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXhwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gYXNzdXJlIGl0IHRvIHBvaW50IHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcywgeW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVjdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLlxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLFxuICAgICAqIHRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdSBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9ucyB1c2VkIGJ5IFBvcHBlci5qc1xuICogdGhpcyBvYmplY3QgZ2V0IHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhpcyBvYmplY3QsIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50XG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTBcbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwiaW1wb3J0IHsgSUJ1dHRvbkRlZmluaXRpb24gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JQnV0dG9uRGVmaW5pdGlvblwiO1xyXG5pbXBvcnQgeyBQYWdlR3VpZGUgfSBmcm9tIFwiLi4vUGFnZUd1aWRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dG9uR1VJIGltcGxlbWVudHMgSUJ1dHRvbkRlZmluaXRpb24ge1xyXG5cdHB1YmxpYyBwb3NpdGlvbjogc3RyaW5nID0gJ2Fic29sdXRlJztcclxuXHRwdWJsaWMgdG9wOiBudW1iZXJ8c3RyaW5nID0gMzI7XHJcblx0cHVibGljIHJpZ2h0OiBudW1iZXJ8c3RyaW5nID0gMzI7XHJcblx0cHVibGljIGJvdHRvbTogbnVtYmVyfHN0cmluZyA9ICdpbml0aWFsJztcclxuXHRwdWJsaWMgbGVmdDogbnVtYmVyfHN0cmluZyA9ICdpbml0aWFsJztcclxuXHRwdWJsaWMgY29udGVudDogc3RyaW5nID0gJ2knO1xyXG5cdHB1YmxpYyBzdHlsZToge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7XHJcblx0XHQncGFkZGluZy1yaWdodCc6ICcycHgnLFxyXG5cdH07XHJcblxyXG5cdHB1YmxpYyBtYXJrdXA6IEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuXHQvKlxyXG5cdCAqIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHQgKiB0b3A6IDMycHg7XHJcblx0ICogcmlnaHQ6IDMycHg7XHJcblx0ICovXHJcblxyXG5cdGNvbnN0cnVjdG9yKGR0bz86IElCdXR0b25EZWZpbml0aW9uKSB7XHJcblx0XHRpZiAodHlwZW9mIGR0byAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0T2JqZWN0LmtleXMoZHRvKS5mb3JFYWNoKGtleSA9PiB0aGlzW2tleV0gPSBkdG9ba2V5XSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHRoaXMubWFya3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcblx0XHR0aGlzLm1hcmt1cC5pbm5lckhUTUwgPSB0aGlzLmNvbnRlbnQ7XHJcblx0XHR0aGlzLm1hcmt1cC5jbGFzc0xpc3QuYWRkKCBgJHtQYWdlR3VpZGUuQ1NTX1BSRUZJWH0tYnV0dG9uLXN0YXJ0YCApO1xyXG5cdFx0dGhpcy5tYXJrdXAuc3R5bGUucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xyXG5cdFx0dGhpcy5tYXJrdXAuc3R5bGUudG9wID0gdGhpcy50b1N0eWxlU3RyaW5nKCB0aGlzLnRvcCApO1xyXG5cdFx0dGhpcy5tYXJrdXAuc3R5bGUucmlnaHQgPSB0aGlzLnRvU3R5bGVTdHJpbmcoIHRoaXMucmlnaHQgKTtcclxuXHRcdHRoaXMubWFya3VwLnN0eWxlLmJvdHRvbSA9IHRoaXMudG9TdHlsZVN0cmluZyggdGhpcy5ib3R0b20gKTtcclxuXHRcdHRoaXMubWFya3VwLnN0eWxlLmxlZnQgPSB0aGlzLnRvU3R5bGVTdHJpbmcoIHRoaXMubGVmdCApO1xyXG5cclxuXHRcdE9iamVjdC5rZXlzKHRoaXMuc3R5bGUpLmZvckVhY2goa2V5ID0+IHRoaXMubWFya3VwLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdGhpcy5zdHlsZVtrZXldKSApO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSB0b1N0eWxlU3RyaW5nKCB2YWx1ZTpzdHJpbmd8bnVtYmVyICk6c3RyaW5nIHtcclxuXHRcdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gYCR7dmFsdWV9cHhgIDogdmFsdWU7XHJcblx0fVxyXG59IiwiaW1wb3J0IHsgUGFnZUd1aWRlIH0gZnJvbSAnLi4vUGFnZUd1aWRlJztcclxuaW1wb3J0IHsgSUJ1dHRvbkRlZmluaXRpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lCdXR0b25EZWZpbml0aW9uJztcclxuaW1wb3J0IHsgQnV0dG9uR1VJIH0gZnJvbSAnLi9CdXR0b25HVUknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2VHdWlkZUd1aSB7XHJcbiAgICBwcml2YXRlIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJpdmF0ZSBidG5TdGFydDogQnV0dG9uR1VJO1xyXG4gICAgcHJpdmF0ZSB0YXJnZXRzOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhZ2VHdWlkZUd1aVxyXG4gICAgICogQGRlc2NyaXB0aW9uIGFkZHMgYSBjYW52YXMgYXMgYmFja2Ryb3AsIGZyb20gd2hpY2ggdGhlIGd1aSB3aWxsIGNsZWFyIHNoYXBlcyB0byBzaG93IHRoZSB1bmRlcmx5aW5nIGhpZ2hsaWdodGVkIGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0geyBib29sZWFuIH0gaGFzQnV0dG9uIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJ1dHRvbkRlZmluaXRpb246IGJvb2xlYW58SUJ1dHRvbkRlZmluaXRpb24gPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICB0aGlzLmNhbnZhcy5jbGFzc05hbWUgPSBgJHtQYWdlR3VpZGUuQ1NTX1BSRUZJWH0tYmFja2Ryb3BgO1xyXG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoICEgdGhpcy5idXR0b25EZWZpbml0aW9uICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5idXR0b25EZWZpbml0aW9uID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blN0YXJ0ID0gbmV3IEJ1dHRvbkdVSSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU3RhcnQgPSBuZXcgQnV0dG9uR1VJKCB0aGlzLmJ1dHRvbkRlZmluaXRpb24gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5idG5TdGFydC5tYXJrdXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogb25TdGFydFxyXG4gICAgICogQGRlc2NyaXB0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHVwb24gd2hlbiBjbGlja2luZyB0aGUgc3RhcnQgYnV0dG9uLlxyXG4gICAgICogQHBhcmFtIHsgKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCk6IGFueSB9IGNhbGxiYWNrIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25TdGFydChjYWxsYmFjazogKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCkgPT4gYW55ICk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYnRuU3RhcnQubWFya3VwLm9uY2xpY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG9uRW5kXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgdXBvbiB3aGVuIGNsaWNraW5nIHRoZSBjYW52YXMuXHJcbiAgICAgKiBAcGFyYW0geyAodGhpczogSFRNTEVsZW1lbnQsIGV2OiBNb3VzZUV2ZW50KTogYW55IH0gY2FsbGJhY2sgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkVuZChjYWxsYmFjazogKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCkgPT4gYW55ICk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2FudmFzLm9uY2xpY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHN0YXJ0XHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU2l6ZXMgdGhlIGNhbnZhcyBhbmQgc2l6ZXMgaXQgdG8gZnVsbHkgY292ZXIgZWl0aGVyIHRoZSB3aW5kb3csIGVpdGhlciB0aGUgY29udGVudHMuXHJcbiAgICAgKiBAcmV0dXJucyB7IHZvaWQgfSBcclxuICAgICAqIEBtZW1iZXJvZiBQYWdlR3VpZGVHdWlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IHVuZGVmaW5lZDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJCYWNrZHJvcCgpO1xyXG5cclxuICAgICAgICBpZiAoIHR5cGVvZiB0aGlzLnRhcmdldHMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHRoaXMudGFyZ2V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMudGFyZ2V0cy5pdGVtKGkpO1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudFJlY3QubGVmdCxcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRSZWN0LnRvcCxcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRSZWN0LndpZHRoLFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudFJlY3QuaGVpZ2h0LFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RvcCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnJywgNTAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGlnaGxpZ2h0KGVsZW1lbnRzOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50Pik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IGVsZW1lbnRzO1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJCYWNrZHJvcCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzdGFnZVdpZHRoOiBudW1iZXIgPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICBjb25zdCBzdGFnZUhlaWdodDogbnVtYmVyID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYCR7c3RhZ2VXaWR0aH1weGApO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYCR7c3RhZ2VIZWlnaHR9cHhgKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3JhZGllbnQgPSB0aGlzLmN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudChcclxuICAgICAgICAgICAgc3RhZ2VXaWR0aC8yLCBcclxuICAgICAgICAgICAgc3RhZ2VIZWlnaHQvMiwgXHJcbiAgICAgICAgICAgIDAsIFxyXG4gICAgICAgICAgICBzdGFnZVdpZHRoIC8gMiwgXHJcbiAgICAgICAgICAgIHN0YWdlSGVpZ2h0LzIsIFxyXG4gICAgICAgICAgICBNYXRoLm1heChzdGFnZVdpZHRoLCBzdGFnZUhlaWdodClcclxuICAgICAgICApO1xyXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCAncmdiYSgwLDAsMCwwLjUpJyk7XHJcbiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsICdyZ2JhKDAsMCwwLDAuODUpJyk7XHJcblxyXG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCBzdGFnZVdpZHRoLCBzdGFnZUhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgc3RhZ2VXaWR0aCwgc3RhZ2VIZWlnaHQpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUGFnZUd1aWRlSXRlbSB9IGZyb20gXCIuLi9QYWdlR3VpZGVJdGVtXCI7XHJcbmltcG9ydCB7IFBhZ2VHdWlkZSB9IGZyb20gXCIuLi9QYWdlR3VpZGVcIjtcclxuXHJcbmltcG9ydCBQb3BwZXIsIHsgUG9wcGVyT3B0aW9ucyB9IGZyb20gJ3BvcHBlci5qcyc7XHJcbmltcG9ydCB7IFBsYWNlbWVudCB9IGZyb20gJ3BvcHBlci5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZUd1aWRlSXRlbUdVSSB7XHJcbiAgICBwdWJsaWMgbWFya3VwOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgYnRuRXhpdDogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGJ0blByZXZpb3VzOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByaXZhdGUgYnRuTmV4dDogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGJ1dHRvbnM6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjb250ZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgY291bnRlcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHRpdGxlOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgYXJyb3c6IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIHByaXZhdGUgcG9wcGVyOiBQb3BwZXI7XHJcbiAgICBwcml2YXRlIHBvcHBlclNoaWZ0czogYW55ID0ge1xyXG4gICAgICAgIHRvcDogWyAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnIF0sXHJcbiAgICAgICAgcmlnaHQ6IFsgJ2xlZnQnLCAndG9wJywgJ2JvdHRvbScgXSxcclxuICAgICAgICBib3R0b206IFsgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JyBdLFxyXG4gICAgICAgIGxlZnQ6IFsgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nIF0sXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlR3VpZGVJdGVtOiBQYWdlR3VpZGVJdGVtKSB7XHJcbiAgICAgICAgdGhpcy5tYXJrdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhcnRpY2xlJyk7XHJcbiAgICAgICAgdGhpcy5idG5FeGl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgdGhpcy5idG5QcmV2aW91cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHRoaXMuYnRuTmV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJyk7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXJrdXAuY2xhc3NOYW1lID0gYCR7UGFnZUd1aWRlLkNTU19QUkVGSVh9LSR7UGFnZUd1aWRlSXRlbS5DU1NfUFJFRklYfWA7XHJcbiAgICAgICAgdGhpcy5hcnJvdy5jbGFzc05hbWUgPSBgJHtQYWdlR3VpZGUuQ1NTX1BSRUZJWH0tJHtQYWdlR3VpZGVJdGVtLkNTU19QUkVGSVh9LWFycm93YDtcclxuICAgICAgICB0aGlzLmNvbnRlbnQuY2xhc3NOYW1lID0gYCR7UGFnZUd1aWRlLkNTU19QUkVGSVh9LSR7UGFnZUd1aWRlSXRlbS5DU1NfUFJFRklYfS1jb250ZW50YDtcclxuICAgICAgICB0aGlzLmNvdW50ZXIuY2xhc3NOYW1lID0gYCR7UGFnZUd1aWRlLkNTU19QUkVGSVh9LSR7UGFnZUd1aWRlSXRlbS5DU1NfUFJFRklYfS1jb3VudGVyYDtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuY2xhc3NOYW1lID0gYCR7UGFnZUd1aWRlLkNTU19QUkVGSVh9LSR7UGFnZUd1aWRlSXRlbS5DU1NfUFJFRklYfS1idXR0b25zYDtcclxuICAgICAgICB0aGlzLmJ0bkV4aXQuY2xhc3NOYW1lID0gYCR7UGFnZUd1aWRlLkNTU19QUkVGSVh9LSR7UGFnZUd1aWRlSXRlbS5DU1NfUFJFRklYfS1idXR0b24gJHtQYWdlR3VpZGUuQ1NTX1BSRUZJWH0tJHtQYWdlR3VpZGVJdGVtLkNTU19QUkVGSVh9LWJ1dHRvbi1leGl0YDtcclxuICAgICAgICB0aGlzLmJ0blByZXZpb3VzLmNsYXNzTmFtZSA9IGAke1BhZ2VHdWlkZS5DU1NfUFJFRklYfS0ke1BhZ2VHdWlkZUl0ZW0uQ1NTX1BSRUZJWH0tYnV0dG9uICR7UGFnZUd1aWRlLkNTU19QUkVGSVh9LSR7UGFnZUd1aWRlSXRlbS5DU1NfUFJFRklYfS1idXR0b24tcHJldmlvdXNgO1xyXG4gICAgICAgIHRoaXMuYnRuTmV4dC5jbGFzc05hbWUgPSBgJHtQYWdlR3VpZGUuQ1NTX1BSRUZJWH0tJHtQYWdlR3VpZGVJdGVtLkNTU19QUkVGSVh9LWJ1dHRvbiAke1BhZ2VHdWlkZS5DU1NfUFJFRklYfS0ke1BhZ2VHdWlkZUl0ZW0uQ1NTX1BSRUZJWH0tYnV0dG9uLW5leHRgO1xyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbnMuYXBwZW5kQ2hpbGQodGhpcy5idG5QcmV2aW91cyk7XHJcbiAgICAgICAgdGhpcy5idXR0b25zLmFwcGVuZENoaWxkKHRoaXMuYnRuTmV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMubWFya3VwLmFwcGVuZENoaWxkKHRoaXMuYXJyb3cpO1xyXG4gICAgICAgIHRoaXMubWFya3VwLmFwcGVuZENoaWxkKHRoaXMuYnRuRXhpdCk7XHJcbiAgICAgICAgdGhpcy5tYXJrdXAuYXBwZW5kQ2hpbGQodGhpcy50aXRsZSk7XHJcbiAgICAgICAgdGhpcy5tYXJrdXAuYXBwZW5kQ2hpbGQodGhpcy5jb3VudGVyKTtcclxuICAgICAgICB0aGlzLm1hcmt1cC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMubWFya3VwLmFwcGVuZENoaWxkKHRoaXMuYnV0dG9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMudGl0bGUuaW5uZXJIVE1MID0gdGhpcy5wYWdlR3VpZGVJdGVtLnRpdGxlO1xyXG4gICAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSB0aGlzLnBhZ2VHdWlkZUl0ZW0uY29udGVudDtcclxuICAgICAgICB0aGlzLmJ0bkV4aXQuaW5uZXJIVE1MID0gJyZ0aW1lczsnO1xyXG4gICAgICAgIHRoaXMuYnRuUHJldmlvdXMuaW5uZXJIVE1MID0gJyZsYXF1bzsnO1xyXG4gICAgICAgIHRoaXMuYnRuTmV4dC5pbm5lckhUTUwgPSAnJnJhcXVvOyc7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyLmlubmVySFRNTCA9IGAke3RoaXMucGFnZUd1aWRlSXRlbS5pbmRleCArIDF9IC8gJHt0aGlzLnBhZ2VHdWlkZUl0ZW0uY29sbGVudGlvbkxlbmd0aH1gO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wYWdlR3VpZGVJdGVtLmluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuUHJldmlvdXMuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wYWdlR3VpZGVJdGVtLmluZGV4ID09PSB0aGlzLnBhZ2VHdWlkZUl0ZW0uY29sbGVudGlvbkxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5OZXh0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBvc2l0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHBvcHVwQm94ID0gdGhpcy5tYXJrdXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgcG9wdXBDZW50ZXI6IHt4OiBudW1iZXIsIHk6IG51bWJlciB9ID0ge1xyXG4gICAgICAgICAgICB4OiBwb3B1cEJveC5sZWZ0ICsgcG9wdXBCb3gud2lkdGggLyAyLFxyXG4gICAgICAgICAgICB5OiBwb3B1cEJveC50b3AgKyBwb3B1cEJveC5oZWlnaHQgLyAyLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBsZWZ0OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCB0b3A6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gdGhpcy5wYWdlR3VpZGVJdGVtLnBvc2l0aW9uO1xyXG5cclxuICAgICAgICB0aGlzLmFycm93LnN0eWxlLnRvcCA9ICcnO1xyXG4gICAgICAgIHRoaXMuYXJyb3cuc3R5bGUucmlnaHQgPSAnJztcclxuICAgICAgICB0aGlzLmFycm93LnN0eWxlLmJvdHRvbSA9ICcnO1xyXG4gICAgICAgIHRoaXMuYXJyb3cuc3R5bGUubGVmdCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucGFnZUd1aWRlSXRlbS50YXJnZXRzID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLnBhZ2VHdWlkZUl0ZW0udGFyZ2V0cy5sZW5ndGggPT09IDAgfHwgcG9zaXRpb24gPT09ICdjZW50ZXInKSB7XHJcbiAgICAgICAgICAgIGxlZnQgPSAod2luZG93LmlubmVyV2lkdGggLSBwb3B1cEJveC53aWR0aCkgLyAyO1xyXG4gICAgICAgICAgICB0b3AgPSAod2luZG93LmlubmVySGVpZ2h0IC0gcG9wdXBCb3guaGVpZ2h0KSAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZUd1aWRlSXRlbS5wb3NpdGlvbiA9ICdjZW50ZXInO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tYXJrdXAuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHRoaXMucGFnZUd1aWRlSXRlbS5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMubWFya3VwLnN0eWxlLmxlZnQgPSBgJHsgbGVmdCA+PiAwIH1weGA7XHJcbiAgICAgICAgICAgIHRoaXMubWFya3VwLnN0eWxlLnRvcCA9IGAkeyB0b3AgPj4gMCB9cHhgO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldDogSFRNTEVsZW1lbnQgPSB0aGlzLnBhZ2VHdWlkZUl0ZW0udGFyZ2V0c1swXTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Qm94ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wb3BwZXIgPSBuZXcgUG9wcGVyKHRhcmdldCwgdGhpcy5tYXJrdXAsIHtcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudDogcG9zaXRpb24gYXMgUGxhY2VtZW50LCAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycm93OiB7IGVsZW1lbnQ6IHRoaXMuYXJyb3cgfSxcclxuICAgICAgICAgICAgICAgICAgICBmbGlwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLnBvcHBlclNoaWZ0c1twb3NpdGlvbl1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIHVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucG9wcGVyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLnBvcHBlci51cGRhdGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgb25FeGl0KGNhbGxiYWNrOiAoKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCkgPT4gYW55KSB8IG51bGwpOiB2b2lkIHsgdGhpcy5idG5FeGl0Lm9uY2xpY2sgPSBjYWxsYmFjazsgfVxyXG4gICAgcHVibGljIG9uUHJldmlvdXMoY2FsbGJhY2s6ICgodGhpczogSFRNTEVsZW1lbnQsIGV2OiBNb3VzZUV2ZW50KSA9PiBhbnkpIHwgbnVsbCk6IHZvaWQgeyB0aGlzLmJ0blByZXZpb3VzLm9uY2xpY2sgPSBjYWxsYmFjazsgfVxyXG4gICAgcHVibGljIG9uTmV4dChjYWxsYmFjazogKCh0aGlzOiBIVE1MRWxlbWVudCwgZXY6IE1vdXNlRXZlbnQpID0+IGFueSkgfCBudWxsKTogdm9pZCB7IHRoaXMuYnRuTmV4dC5vbmNsaWNrID0gY2FsbGJhY2s7IH1cclxufVxyXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9QYWdlR3VpZGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9QYWdlR3VpZGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vUGFnZUd1aWRlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgeyBQYWdlR3VpZGVJdGVtIH0gZnJvbSAnLi9QYWdlR3VpZGVJdGVtJztcclxuaW1wb3J0IHsgUGFnZUd1aWRlR3VpIH0gZnJvbSAnLi9HVUkvUGFnZUd1aWRlR1VJJztcclxuXHJcbmltcG9ydCAnLi9QYWdlR3VpZGUuc2Nzcyc7XHJcbmltcG9ydCB7IElCdXR0b25EZWZpbml0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lCdXR0b25EZWZpbml0aW9uJztcclxuaW1wb3J0IHsgSVBhZ2VHdWlkZUl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvSVBhZ2VHdWlkZUl0ZW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2VHdWlkZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENTU19QUkVGSVg6IHN0cmluZyA9ICdwYWdlLWd1aWRlJztcclxuXHJcbiAgICBwcml2YXRlIGd1aTogUGFnZUd1aWRlR3VpO1xyXG4gICAgcHJpdmF0ZSBpdGVtczogUGFnZUd1aWRlSXRlbVtdO1xyXG4gICAgcHJpdmF0ZSBpc0FjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVJbmRleDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgYWN0aXZlSXRlbTogUGFnZUd1aWRlSXRlbTtcclxuXHJcbiAgICBwcml2YXRlIG9uU3RhcnRDYWxsYmFjazogRnVuY3Rpb247XHJcbiAgICBwcml2YXRlIG9uRW5kQ2FsbGJhY2s6IEZ1bmN0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlcyBhIG5ldyBQYWdlR3VpZGVcclxuICAgICAqIEBwYXJhbSB7IElQYWdlR3VpZGVJdGVtW10gfSBkdG9JdGVtcyBhIGxpc3Qgb2YgZHRvSXRlbXMgdG8gYmUgY29udmVydGVkIGludG8gUGFnZUd1aWRlSXRlbXNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZHRvSXRlbXM6IElQYWdlR3VpZGVJdGVtW10sIGJ1dHRvbkRlZmluaXRpb246IGJvb2xlYW58SUJ1dHRvbkRlZmluaXRpb24gPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5ndWkgPSBuZXcgUGFnZUd1aWRlR3VpKCBidXR0b25EZWZpbml0aW9uICk7XHJcblxyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBkdG9JdGVtc1xyXG4gICAgICAgICAgICAuZmlsdGVyKCBkdG8gPT4gdHlwZW9mIGR0by5lbGVtZW50ID09PSAndW5kZWZpbmVkJyB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGR0by5lbGVtZW50KS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAubWFwKCAoZHRvLCBpbmRleCwgbGlzdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBQYWdlR3VpZGVJdGVtKGR0by5jb250ZW50LCBpbmRleCwgbGlzdC5sZW5ndGgsIGR0by5lbGVtZW50LCBkdG8udGl0bGUsIGR0by5wb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgaXRlbS5vbkV4aXQoKCk9PnsgdGhpcy5zdG9wKCkgfSk7XHJcbiAgICAgICAgICAgICAgICBpdGVtLm9uUHJldmlvdXMoKCk9PnsgdGhpcy5hY3RpdmVJbmRleCAtLTsgdGhpcy5zdGVwKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgaXRlbS5vbk5leHQoKCk9PnsgdGhpcy5hY3RpdmVJbmRleCArKzsgdGhpcy5zdGVwKCk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCBidXR0b25EZWZpbml0aW9uICE9PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgdGhpcy5ndWkub25TdGFydCgoKSA9PiB0aGlzLnN0YXJ0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmd1aS5vbkVuZCgoKSA9PiB0aGlzLnN0b3AoKSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5vbmtleWRvd24gPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghIHRoaXMuaXNBY3RpdmUgfHwgZXZ0LmFsdEtleSAgfHwgZXZ0LnNoaWZ0S2V5ICB8fCBldnQuY3RybEtleSAgfHwgZXZ0Lm1ldGFLZXkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoIChldnQua2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1VwJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdMZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUluZGV4IC0tOyBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdEb3duJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnRW50ZXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggKys7IFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnRXNjYXBlJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0VzYyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9IChldnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCEgdGhpcy5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmd1aS51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hY3RpdmVJdGVtICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJdGVtLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHN0YXJ0XHJcbiAgICAgKiBAZGVzY3JpcHRpb24gc3RhcnRzIHRoZSBQYWdlR3VpZGVcclxuICAgICAqIEBtZW1iZXJvZiBQYWdlR3VpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ3VpLnN0YXJ0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RlcCgpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25TdGFydENhbGxiYWNrICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uU3RhcnRDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHN0ZXBcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZW5kZXJzIHRoZSBhY3RpdmUgc3RlcC5cclxuICAgICAqIEBwYXJhbSB7IG51bWJlciB9IGluZGV4IFtPUFRJT05BTF0gdGhlIHN0ZXAgeW91IHdhbnQgdG8gYWN0aXZhdGVcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfSBcclxuICAgICAqIEBtZW1iZXJvZiBQYWdlR3VpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0ZXAoaW5kZXg/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiBpbmRleCA+PSAwICYmIGluZGV4IDw9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hY3RpdmVJdGVtICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFuQWN0aXZlSXRlbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5hY3RpdmVJbmRleCA8IDAgfHwgdGhpcy5hY3RpdmVJbmRleCA+PSB0aGlzLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYWN0aXZlSXRlbSA9IHRoaXMuaXRlbXNbdGhpcy5hY3RpdmVJbmRleF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hY3RpdmVJdGVtLmRyYXcoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmd1aS5oaWdobGlnaHQoIHRoaXMuYWN0aXZlSXRlbS50YXJnZXRzICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjbGVhbkFjdGl2ZUl0ZW1cclxuICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGUgYWN0aXZlIGl0ZW0gaXMgZGVmaWVuZCwgY2xlYW4gaXQgdXAsIGFuZCBzZXQgaXQgdG8gdW5kZWZpbmVkLlxyXG4gICAgICogQG1lbWJlcm9mIFBhZ2VHdWlkZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xlYW5BY3RpdmVJdGVtKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hY3RpdmVJdGVtID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hY3RpdmVJdGVtLmNsZWFudXAoKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZUl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzdG9wXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gc3RvcHMgdGhlIFBhZ2VHdWlkZVxyXG4gICAgICogQG1lbWJlcm9mIFBhZ2VHdWlkZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RvcCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ndWkuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuY2xlYW5BY3RpdmVJdGVtKCk7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IDA7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVuZENhbGxiYWNrICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uRW5kQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBvblN0YXJ0XHJcbiAgICAgKiBAZGVzY3JpcHRpb24gYWRkcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgd2hlbiB0aGUgcGFnZUd1aWRlIGlzIHN0YXJ0ZWQgYnkgdGhlIHVzZXIuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBcclxuICAgICAqIEBtZW1iZXJvZiBQYWdlR3VpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uU3RhcnQoY2I6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5vblN0YXJ0Q2FsbGJhY2sgPSBjYjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogb25FbmRcclxuICAgICAqIEBkZXNjcmlwdGlvbiBhZGRzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSB3aGVuIHRoZSBwYWdlR3VpZGUgcmVhY2hlcyB0aGUgZW5kLCBvciBpcyBzdG9wcGVkIGJ5IHRoZSB1c2VyLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgXHJcbiAgICAgKiBAbWVtYmVyb2YgUGFnZUd1aWRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkVuZChjYjogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLm9uRW5kQ2FsbGJhY2sgPSBjYjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFBhZ2VHdWlkZUl0ZW1HVUkgfSBmcm9tIFwiLi9HVUkvUGFnZUd1aWRlSXRlbUdVSVwiO1xyXG5pbXBvcnQgeyBJUGFnZUd1aWRlSXRlbSB9IGZyb20gXCIuL2ludGVyZmFjZXMvSVBhZ2VHdWlkZUl0ZW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYWdlR3VpZGVJdGVtIGltcGxlbWVudHMgSVBhZ2VHdWlkZUl0ZW0ge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBDU1NfUFJFRklYOiBzdHJpbmcgPSAnaXRlbSc7XHJcblxyXG4gICAgcHJpdmF0ZSBndWk6IFBhZ2VHdWlkZUl0ZW1HVUk7XHJcbiAgICBwdWJsaWMgdGFyZ2V0czogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFBhZ2VHdWlkZUl0ZW1cclxuICAgICAqIEBwYXJhbSB7IHN0cmluZyB9IGNvbnRlbnQgQ29udGVudHMgb2YgdGhlIHBvcHVwLCBjYW4gYmUgcGxhaW50ZXh0IG9yIEhUTUxcclxuICAgICAqIEBwYXJhbSB7IG51bWJlciB9IGluZGV4IEluZGV4IG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyBudW1iZXIgfSBjb2xsZW50aW9uTGVuZ3RoIExlbmd0aCBvZiB0aGUgY29sbGVjdGlvblxyXG4gICAgICogQHBhcmFtIHsgc3RyaW5nIH0gZWxlbWVudCBbT1BUSU9OQUxdIGVsZW1lbnQgcXVlcnkgc2VsZWN0b3JcclxuICAgICAqIEBwYXJhbSB7IHN0cmluZyB9IHRpdGxlIFtPUFRJT05BTF0gdGl0bGUgb2YgdGhlIHBvcHVwXHJcbiAgICAgKiBAcGFyYW0geyBzdHJpbmcgfSBwb3NpdGlvbiBbT1BUSU9OQUxdIHBvc2l0aW9uLCBkZWZhdWx0cyB0byByaWdodFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgY29udGVudDogc3RyaW5nLCBcclxuICAgICAgICBwdWJsaWMgaW5kZXg6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgY29sbGVudGlvbkxlbmd0aDogbnVtYmVyLFxyXG4gICAgICAgIHB1YmxpYyBlbGVtZW50Pzogc3RyaW5nLCBcclxuICAgICAgICBwdWJsaWMgdGl0bGU6IHN0cmluZyA9ICcnLCBcclxuICAgICAgICBwdWJsaWMgcG9zaXRpb246IHN0cmluZyA9ICdib3R0b20nLFxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuZWxlbWVudCAhPT0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ndWkgPSBuZXcgUGFnZUd1aWRlSXRlbUdVSSggdGhpcyApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZHJhd1xyXG4gICAgICogQGRlc2NyaXB0aW9uIERyYXdzIHRoZSBQYWdlR3VpZGVJdGVtIG9uIHRoZSBkb2N1bWVudC5ib2R5XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBhIGNhbGxiYWNrIGZ1bmN0aW9uLCBzbyBpdCB3aWxsIHdvcmsgb24gSUUxMSBhcyB3ZWxsXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH0gXHJcbiAgICAgKiBAbWVtYmVyb2YgUGFnZUd1aWRlSXRlbVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZHJhdyhjYjogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy50YXJnZXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy50YXJnZXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzWzBdLnNjcm9sbEludG9WaWV3KHtibG9jazogJ2NlbnRlcicsIGlubGluZTogJ25lYXJlc3QnfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggdGhpcy5ndWkubWFya3VwICk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3VpLnBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBjYigpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2xlYW51cFxyXG4gICAgICogQGRlc2NyaXB0aW9uIHJlbW92ZXMgdGhlIFBhZ2VHdWlkZUl0ZW0gZnJvbSB0aGUgZG9jdW1lbnQuYm9keVxyXG4gICAgICogQG1lbWJlcm9mIFBhZ2VHdWlkZUl0ZW1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNsZWFudXAoKTogdm9pZCB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCggdGhpcy5ndWkubWFya3VwICk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHVwZGF0ZVxyXG4gICAgICogQGRlc2NyaXB0aW9uIHVwZGF0ZXMgdGhlIEdVSSwgcmVwb3NpdGlvbnMgd2hlbiBuZWVkZWRcclxuICAgICAqIEBtZW1iZXJvZiBQYWdlR3VpZGVJdGVtXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ndWkudXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBvbkV4aXRcclxuICAgICAqIEBkZXNjcmlwdGlvbiBmaXJlcyBhIGNhbGxiYWNrIHdoZW4gdGhlIHVzZXIgY2xvc2VzIHRoZSBQYWdlR3VpZGVJdGVtXHJcbiAgICAgKiBAcGFyYW0geygoKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCkgPT4gYW55KSB8IG51bGwpfSBjYWxsYmFjayBcclxuICAgICAqIEBtZW1iZXJvZiBQYWdlR3VpZGVJdGVtXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkV4aXQoIGNhbGxiYWNrOiAoKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCkgPT4gYW55KSB8IG51bGwpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmd1aS5vbkV4aXQoY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogb25QcmV2aW91c1xyXG4gICAgICogQGRlc2NyaXB0aW9uIGZpcmVzIGEgY2FsbGJhY2sgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIHByZXZpb3VzIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHsoKCh0aGlzOiBIVE1MRWxlbWVudCwgZXY6IE1vdXNlRXZlbnQpID0+IGFueSkgfCBudWxsKX0gY2FsbGJhY2sgXHJcbiAgICAgKiBAbWVtYmVyb2YgUGFnZUd1aWRlSXRlbVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25QcmV2aW91cyggY2FsbGJhY2s6ICgodGhpczogSFRNTEVsZW1lbnQsIGV2OiBNb3VzZUV2ZW50KSA9PiBhbnkpIHwgbnVsbCApOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmd1aS5vblByZXZpb3VzKGNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogb25OZXh0XHJcbiAgICAgKiBAZGVzY3JpcHRpb24gZmlyZXMgYSBjYWxsYmFjayB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgbmV4dCBidXR0b25cclxuICAgICAqIEBwYXJhbSB7KCgodGhpczogSFRNTEVsZW1lbnQsIGV2OiBNb3VzZUV2ZW50KSA9PiBhbnkpIHwgbnVsbCl9IGNhbGxiYWNrIFxyXG4gICAgICogQG1lbWJlcm9mIFBhZ2VHdWlkZUl0ZW1cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uTmV4dCggY2FsbGJhY2s6ICgodGhpczogSFRNTEVsZW1lbnQsIGV2OiBNb3VzZUV2ZW50KSA9PiBhbnkpIHwgbnVsbCApOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmd1aS5vbk5leHQoY2FsbGJhY2spO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSVBhZ2VHdWlkZUl0ZW0gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JUGFnZUd1aWRlSXRlbVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGV4YW1wbGVEYXRhOiBJUGFnZUd1aWRlSXRlbVtdID0gW1xyXG5cdHtcclxuXHRcdHRpdGxlOiBgRGlsaWdlbnRpYSBVaXRnZXZlcmlqICZtZGFzaDsgUGFnZUd1aWRlYCxcclxuXHRcdGNvbnRlbnQ6IGA8cD5UaGlzIGlzIGFuIGV4YW1wbGUgb2Ygb3VyIFBhZ2VHdWlkZSwgYW5kIHdoeSB3ZSBjcmVhdGVkIGFub3RoZXIgaW50cm9kdWN0aW9uIGxpYnJhcnkuPC9wPmAsXHJcblx0fSxcclxuXHR7XHJcblx0XHR0aXRsZTogYERpbGlnZW50aWEgVWl0Z2V2ZXJpaiAmbWRhc2g7IFBhZ2VHdWlkZWAsXHJcblx0XHRjb250ZW50OiBgXHJcblx0XHQ8cD5PdXIgYXBwbGljYXRpb25zIHVzdWFseSBjb25zaXN0IG9mIG5lc3RlZCBjb250YWluZXJzLCBzb21lIGFyZSBwb3NpdGlvbmVkIGFic29sdXRlIG90aGVycyBmaXhlZCBvciByZWxhdGl2ZS48L3A+XHJcblx0XHQ8cD5Nb3N0IG9mIHRoZSBpbnRyb2R1Y3Rpb24gbGlicmFyaWVzIEkndmUgZm91bmQgd2VyZSBiYXNlZCBvbiBaLWluZGV4LiBUaGlzIHdvcmtzIGdyZWF0LCBpZiB5b3UncmUgbm90IHdyaXRpbmcgYW4gXHJcblx0XHRhcHAgd2hlcmUgeW91IGFscmVhZHkgdXNlIHotaW5kZXhlcyBvbiBjb250YWluZXJzIGFuZCB0aGVpciBjaGlsZHJlbi48YnI+XHJcblx0XHRJbiBvdGhlciB3b3Jkcywgbm9uZSBvZiB0aGVtIHdvcmtlZCBmb3Igb3VyIHNwZWNpZmljIGNhc2UuPC9wPmAsXHJcblx0fSxcclxuXHR7XHJcblx0XHR0aXRsZTogYERpbGlnZW50aWEgVWl0Z2V2ZXJpaiAmbWRhc2g7IFBhZ2VHdWlkZWAsXHJcblx0XHRjb250ZW50OiBgPHA+U28sIGhvdyBkb2VzIG91ciBndWlkZSB3b3JrPyBXZWxsLCB3ZSBkb24ndCByZWx5IG9uIHotaW5kZXhlcywgYnV0IG91ciBvdmVybGF5IGlzIGEgY2FudmFzLiBXZSBzaW1wbHkgXHJcblx0XHRjdXQgb3V0IGEgc2hhcGUgdG8gc2hvdyB0aGUgaGlnaGxpZ2h0ZWQgZWxlbWVudC48YnI+XHJcblx0XHRPdXIgcG9wLW92ZXIgd2l0aCBhbGwgdGhlIGNvbnRlbnQgaXMgdGhlbiBwbGFjZWQgb24gdG9wIG9mIGFsbCB0aGlzLjwvcD5gLFxyXG5cdH0sXHJcblx0e1xyXG5cdFx0dGl0bGU6IGBEaWxpZ2VudGlhIFVpdGdldmVyaWogJm1kYXNoOyBQYWdlR3VpZGVgLFxyXG5cdFx0Y29udGVudDogYDxwPlRoaXMgaGFzIHNvbWUgZ3JlYXQgY2F2ZWF0cy4gRm9yIGluc3RhbmNlIHdlIGNhbiBlYXNpbHkgaGlnaHRsaWdodCBtdWx0aXBsZSBlbGVtZW50cyBhdCB0aGUgc2FtZSB0aW1lLlxyXG5cdFx0QW5vdGhlciBjYXZlYXQgaXMgdGhhdCB3ZSBjYW4gZGVmaW5lIHNoYXBlcyB0byBoaWdobGlnaHQgcXVpdGUgZWFzaWx5LjwvcD5gLFxyXG5cdH0sXHJcblx0e1xyXG5cdFx0dGl0bGU6IGBTaW5nbGUgRWxlbWVudGAsXHJcblx0XHRjb250ZW50OiBgPHA+VGhpcyBpcyBob3cgd2UgaGlnaGxpZ2h0IGEgc2luZ2xlIGVsZW1lbnQgYnkgZGVmYXVsdC4gTm8gc2hhcGUgb3IgcG9zaXRpb24gaGFzIGJlZW4gZGVmaW5lZC48L3A+YCxcclxuXHRcdGVsZW1lbnQ6IGBoZWFkZXJgLFxyXG5cdH0sXHJcblx0e1xyXG5cdFx0dGl0bGU6IGBTaW5nbGUgRWxlbWVudCwgcG9zaXRpb25lZCA8Y29kZT5yaWdodDwvY29kZT5gLFxyXG5cdFx0Y29udGVudDogYDxwPlRoaXMgaXMgaG93IHdlIGhpZ2hsaWdodCBhIHNpbmdsZSBlbGVtZW50IGJ5IGRlZmF1bHQuIE5vIHNoYXBlIGhhcyBiZWVuIGRlZmluZWQsIGJ1dCB3ZSd2ZSBub3cgcG9zaXRpb25lZCBpdCBvbiB0aGUgcmlnaHQgaGFuZCBzaWRlPC9wPmAsXHJcblx0XHRlbGVtZW50OiBgdWxgLFxyXG5cdFx0cG9zaXRpb246IGByaWdodGAsXHJcblx0fSxcclxuXHR7XHJcblx0XHR0aXRsZTogYE11bHRpcGxlIEVsZW1lbnRzLCBwb3NpdGlvbmVkIDxjb2RlPnJpZ2h0PC9jb2RlPmAsXHJcblx0XHRjb250ZW50OiBgPHA+VGhpcyBpcyBob3cgd2UgaGlnaGxpZ2h0IG11bHRpcGxlIGVsZW1lbnRzIGJ5IGRlZmF1bHQuIE5vIHNoYXBlIGhhcyBiZWVuIGRlZmluZWQsIGJ1dCB3ZSd2ZSBub3cgcG9zaXRpb25lZCBpdCBvbiB0aGUgdG9wIHNpZGU8L3A+YCxcclxuXHRcdGVsZW1lbnQ6IGBsaWAsXHJcblx0XHRwb3NpdGlvbjogYHJpZ2h0YCxcclxuXHR9LFxyXG5cdHtcclxuXHRcdHRpdGxlOiBgU2luZ2xlIEVsZW1lbnQsIHBvc2l0aW9uZWQgPGNvZGU+dG9wPC9jb2RlPmAsXHJcblx0XHRjb250ZW50OiBgPHA+VGhpcyBpcyBob3cgd2UgaGlnaGxpZ2h0IGEgc2luZ2xlIGVsZW1lbnQgYnkgZGVmYXVsdC4gTm8gc2hhcGUgaGFzIGJlZW4gZGVmaW5lZCwgYnV0IHdlJ3ZlIG5vdyBwb3NpdGlvbmVkIGl0IG9uIHRoZSByaWdodCBoYW5kIHNpZGU8L3A+YCxcclxuXHRcdGVsZW1lbnQ6IGAjYXJ0aWNsZS0yYCxcclxuXHRcdHBvc2l0aW9uOiBgdG9wYCxcclxuXHR9LFxyXG5cdHtcclxuXHRcdHRpdGxlOiBgU2luZ2xlIEVsZW1lbnQsIHBvc2l0aW9uZWQgPGNvZGU+dG9wPC9jb2RlPmAsXHJcblx0XHRjb250ZW50OiBgPHA+VGhpcyBpcyBob3cgd2UgaGlnaGxpZ2h0IGEgc2luZ2xlIGVsZW1lbnQgYnkgZGVmYXVsdC4gTm8gc2hhcGUgaGFzIGJlZW4gZGVmaW5lZCwgYnV0IHdlJ3ZlIG5vdyBwb3NpdGlvbmVkIGl0IG9uIHRoZSByaWdodCBoYW5kIHNpZGU8L3A+YCxcclxuXHRcdGVsZW1lbnQ6IGAjYXJ0aWNsZS00YCxcclxuXHRcdHBvc2l0aW9uOiBgdG9wYCxcclxuXHR9LFxyXG5cdHtcclxuXHRcdHRpdGxlOiBgTXVsdGlwbGUgRWxlbWVudHMsIHBvc2l0aW9uZWQgPGNvZGU+Ym90dG9tPC9jb2RlPmAsXHJcblx0XHRjb250ZW50OiBgPHA+VGhpcyBpcyBob3cgd2UgaGlnaGxpZ2h0IGEgc2luZ2xlIGVsZW1lbnQgYnkgZGVmYXVsdC4gTm8gc2hhcGUgaGFzIGJlZW4gZGVmaW5lZCwgYnV0IHdlJ3ZlIG5vdyBwb3NpdGlvbmVkIGl0IG9uIHRoZSBib3R0b20gc2lkZTwvcD5gLFxyXG5cdFx0ZWxlbWVudDogYGFydGljbGUgaDJgLFxyXG5cdFx0cG9zaXRpb246IGBib3R0b21gLFxyXG5cdH0sXHJcbl07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZXhhbXBsZS1wYWdlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZXhhbXBsZS1wYWdlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2V4YW1wbGUtcGFnZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0IGNvbnN0IGV4YW1wbGVQYWdlID0gYFxyXG48ZGl2IGlkPVwiZXhhbXBsZS1wYWdlXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XHJcbiAgICAgICAgPGFzaWRlIGNsYXNzPVwibWVudVwiPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGkgaWQ9XCJtZW51LWl0ZW0tMVwiPjxhIGhyZWY9XCIjYXJ0aWNsZS0xXCI+bWVudSBpdGVtIDE8L2E+PC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBpZD1cIm1lbnUtaXRlbS0yXCI+PGEgaHJlZj1cIiNhcnRpY2xlLTJcIj5tZW51IGl0ZW0gMjwvYT48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIGlkPVwibWVudS1pdGVtLTNcIj48YSBocmVmPVwiI2FydGljbGUtM1wiPm1lbnUgaXRlbSAzPC9hPjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGkgaWQ9XCJtZW51LWl0ZW0tNFwiPjxhIGhyZWY9XCIjYXJ0aWNsZS00XCI+bWVudSBpdGVtIDQ8L2E+PC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBpZD1cIm1lbnUtaXRlbS01XCI+PGEgaHJlZj1cIiNhcnRpY2xlLTVcIj5tZW51IGl0ZW0gNTwvYT48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvYXNpZGU+XHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJjb250ZW50XCI+XHJcbiAgICAgICAgICAgIDxoZWFkZXI+XHJcbiAgICAgICAgICAgICAgICA8aDE+RGlsaWdlbnRpYSBVaXRnZXZlcmlqICZtZGFzaDsgUGFnZUd1aWRlPC9oMT5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJidG4tc3RhcnQtdG91clwiPmk8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9oZWFkZXI+XHJcbiAgICAgICAgICAgIDxoMT5Db250ZW50PC9oMT5cclxuICAgICAgICAgICAgPGFydGljbGUgaWQ9XCJhcnRpY2xlLTFcIj5cclxuICAgICAgICAgICAgICAgIDxoMj5BcnRpY2xlIDE8L2gyPlxyXG4gICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5Mb3JlbSwgaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gSW5jaWR1bnQgcmVwZWxsYXQgcHJvdmlkZW50IGRvbG9yZW0gdmVybyByZXJ1bSwgZGljdGEgdGVtcG9yaWJ1cyBuZXNjaXVudCBvZmZpY2lpcyBudWxsYSBoYXJ1bSBzaW50IGV4ZXJjaXRhdGlvbmVtIGludmVudG9yZSByZWljaWVuZGlzLCB2b2x1cHRhdHVtIHF1b3MuIEJsYW5kaXRpaXMgZG9sb3JlbSBub2JpcyB2ZXJpdGF0aXMuPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+VGVtcG9yZSBpdXN0bywgZXhwbGljYWJvIHBsYWNlYXQgc3VudCByZXBlbGxlbmR1cyBjdW0gcmVtIGFzcGVybmF0dXIgb3B0aW8gdmVuaWFtIGVzdCB2b2x1cHRhcyBpcHN1bS4gVW5kZSBkdWNpbXVzIGRvbG9yZW0sIGFzcGVyaW9yZXMgcXVvIGl0YXF1ZSBwcm92aWRlbnQsIHZvbHVwdGFzIG1hZ25hbSwgZWFxdWUgdGVuZXR1ciBhdXQgdWxsYW0gY29ycnVwdGkgZG9sb3J1bSBleHBsaWNhYm8/PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+VGVtcG9yYSBsYXVkYW50aXVtIHJlY3VzYW5kYWUgbW9sbGl0aWEsIG9kaXQgYWxpYXMgY29ycG9yaXMgcXVhZXJhdCwgZGlzdGluY3RpbyBhZGlwaXNjaSBxdWlhIGV4ZXJjaXRhdGlvbmVtIGRpY3RhLCBpbmNpZHVudCByZXB1ZGlhbmRhZSBpc3RlPyBEZWxlY3R1cyBub3N0cnVtIGFsaXF1aWQgZGVzZXJ1bnQgYXV0ZW0gdGVtcG9yZSBxdWFzaSBjb3Jwb3Jpcy4gRG9sb3JlbXF1ZSBhbGlhcyBleHBlZGl0YSBvbW5pcyByZXByZWhlbmRlcml0IG1vbGxpdGlhITwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+RXZlbmlldCBzdW50IGVuaW0gYXV0IGFzc3VtZW5kYSBzaXQgdm9sdXB0YXRlbSByZWN1c2FuZGFlIGEgYWNjdXNhbXVzLCBldCBhZGlwaXNjaSB0ZW1wb3JhLCBwZXJzcGljaWF0aXMgcGxhY2VhdCBxdW8sIHZlcml0YXRpcyBkaWduaXNzaW1vcyB2b2x1cHRhdGlidXMgcmVwZWxsZW5kdXMgcXVhbSBkaXN0aW5jdGlvIHBlcmZlcmVuZGlzIG1vZGkgZmFjaWxpcyBlYXJ1bS4gTW9sbGl0aWEgbWF4aW1lIGNvcnBvcmlzIGl1cmUuPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+QWxpcXVhbSBpdXN0byBjb3Jwb3JpcyBmdWdpdCwgZGVzZXJ1bnQgY3VtIGFzc3VtZW5kYSBtaW5pbWEsIGFuaW1pIG5vc3RydW0gdGVtcG9yaWJ1cyBkb2xvcnVtIHRlbmV0dXIgZXhwZWRpdGEgdml0YWU/IEV4Y2VwdHVyaSBub24gbWFpb3JlcyBhIHNhZXBlIGRlYml0aXMgb2ZmaWNpYS4gRW5pbSBxdWlzIG9mZmljaWEgaWQsIHF1YWUgcGVyc3BpY2lhdGlzIGVzdCBkZWxlY3R1cz88L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5GYWNpbGlzIGN1bHBhIGxhYm9yZSBub2Jpcz8gRG9sb3IgcHJhZXNlbnRpdW0gc2VxdWksIG5hdHVzIGRvbG9yZXMgZG9sb3JlbXF1ZSBkaWduaXNzaW1vcy4gTWFpb3JlcyBkZWxlbml0aSBhbWV0IHF1aWEgbm9uIGl0YXF1ZSBibGFuZGl0aWlzIGFzc3VtZW5kYSwgY29uc2VxdWF0dXIgdmVsaXQgbmVzY2l1bnQhIEVpdXMsIG5pc2kgcmVpY2llbmRpcyEgSXBzdW0gYSBleCBhdCBwZXJzcGljaWF0aXM/PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8L2FydGljbGU+XHJcbiAgICAgICAgICAgIDxhcnRpY2xlIGlkPVwiYXJ0aWNsZS0yXCI+XHJcbiAgICAgICAgICAgICAgICA8aDI+QXJ0aWNsZSAyPC9oMj5cclxuICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+QWxpcXVhbSByZXBlbGxhdCB2b2x1cHRhdGVzIGZhY2VyZSBmdWdpdCBwcm92aWRlbnQgZW9zIHNvbHV0YSBzdXNjaXBpdCB2b2x1cHRhdGlidXMgY29ycnVwdGkgc2ltaWxpcXVlLiBWb2x1cHRhdGVtIG5hdHVzIGVvcyBlbGlnZW5kaSBpbmNpZHVudCBxdW9kLCBhZCBxdWFzIHJlcHVkaWFuZGFlISBOaXNpIG1hZ25pIGFyY2hpdGVjdG8gZGVzZXJ1bnQgY29ycnVwdGkgc2ludD8gVm9sdXB0YXR1bSwgbmlzaSBxdWlhPzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlBvcnJvLCBjdWxwYT8gQ29uc2VxdXVudHVyIHZpdGFlIG5lc2NpdW50IHZvbHVwdGF0dW0gaWxsbywgb2ZmaWNpaXMgZWxpZ2VuZGkgc2VkIG9mZmljaWEgdGVtcG9yaWJ1cyB1bmRlIHNpdCBpdXN0byBpdXJlPyBDb3Jwb3JpcyBhYiBzaW1pbGlxdWUgc2FlcGUgZXhlcmNpdGF0aW9uZW0gYW5pbWkgZmFjaWxpcyBpZC4gQ29uc2VxdXVudHVyIHJlaWNpZW5kaXMgY29ycnVwdGkgZXZlbmlldCBxdWlkZW0gc3VzY2lwaXQuPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+RWEgdmVyaXRhdGlzIGFiLCBzaW1pbGlxdWUgY29uc2VjdGV0dXIgbmVtbyBhcGVyaWFtIHV0IHJlcGVsbGF0IG51bXF1YW0sIGxhYm9ydW0gZHVjaW11cyBjb25zZXF1dW50dXIgaXN0ZSBwcmFlc2VudGl1bSBuYW0sIGV4Y2VwdHVyaSBhc3N1bWVuZGEgdWxsYW0gaW4gZXN0IGFzcGVyaW9yZXMgc2VxdWkgdm9sdXB0YXR1bSByZXBlbGxlbmR1cy4gTWFpb3JlcywgcmVjdXNhbmRhZSBlc3QuIFByYWVzZW50aXVtLCBvcHRpby48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIDxzcGFuPkFzc3VtZW5kYSBkb2xvcmVzIHBlcnNwaWNpYXRpcyBxdWlkZW0gcmVpY2llbmRpcyBhIGV4ZXJjaXRhdGlvbmVtLCBpbnZlbnRvcmUgaGFydW0gYmxhbmRpdGlpcyBjb25zZXF1dW50dXIgYWQgbGliZXJvIGVsaWdlbmRpIGFtZXQgcXVhbSEgTGFib3Jpb3NhbSB2aXRhZSBkZWxlbml0aSBjb3Jwb3JpcyBtaW51cywgcXVhcywgZnVnaWF0IGluY2lkdW50IG51bGxhIHBvc3NpbXVzIGFtZXQgaXVyZSwgdW5kZSBmYWNlcmUhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+T2JjYWVjYXRpIHF1b2QsIG5hdHVzIGNvcnBvcmlzIHZlbmlhbSBvZGlvIGF1dGVtIHNhcGllbnRlIG5lY2Vzc2l0YXRpYnVzLCBsYWJvcmlvc2FtIGRpc3RpbmN0aW8sIG5vYmlzIHBlcnNwaWNpYXRpcyBtYXhpbWUgYW1ldCBxdWlkZW0gZWFydW0gcXVpcyBleCBxdWkhIEZ1Z2l0IG1vbGVzdGlhZSBsYWJvcmlvc2FtIGRvbG9ydW0gcXVhcyBuZXF1ZSBwYXJpYXR1ciwgZGViaXRpcyBvYmNhZWNhdGkgbGF1ZGFudGl1bS48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5FeHBsaWNhYm8sIHJlcHVkaWFuZGFlLiBRdWlzcXVhbSBjb3Jwb3JpcyBlbGlnZW5kaSBuaWhpbCBldW0uIFNpbWlsaXF1ZSByZXByZWhlbmRlcml0IGVhIHBhcmlhdHVyIHF1YWVyYXQgbWluaW1hIGNvcnJ1cHRpLCBzYXBpZW50ZSBkZWxlY3R1cyBpdGFxdWUgY3VtcXVlLCB0ZW1wb3JpYnVzIHZlbmlhbSBvZGlvPyBRdW9kIGVycm9yIGFuaW1pIHNpbnQgcGFyaWF0dXIgbGFib3Jpb3NhbSBhY2N1c2FtdXMgYXQgbW9sZXN0aWFlPzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPC9hcnRpY2xlPlxyXG4gICAgICAgICAgICA8YXJ0aWNsZSBpZD1cImFydGljbGUtM1wiPlxyXG4gICAgICAgICAgICAgICAgPGgyPkFydGljbGUgMzwvaDI+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIDxzcGFuPk5lc2NpdW50IHF1aXMsIHByYWVzZW50aXVtIHNvbHV0YSBvZmZpY2lpcywgZXhwZWRpdGEgdGVtcG9yYSBpbGx1bSBzZWQgcXVvcyBpc3RlIHRvdGFtIG1haW9yZXMgaW4sIG5vc3RydW0gdGVtcG9yaWJ1cyBleHBsaWNhYm8gZG9sb3JlbSBhcGVyaWFtLiBJbGx1bSBsYWJvcmlvc2FtIHZvbHVwdGF0dW0gb21uaXMhIE5hbSB2ZW5pYW0gZW9zIG1hZ25hbSByZWN1c2FuZGFlIHRlbXBvcmEgYXQhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+TmVxdWUgdXQgbGliZXJvIGZ1Z2lhdCBtb2RpIHF1aWEgZWFydW0gb2RpdCBhbGlxdWlkIGV0IHBhcmlhdHVyIHJlY3VzYW5kYWUgdm9sdXB0YXRlIGF1dCwgYXQgcXVpIHBsYWNlYXQgaW4gdmVsaXQgaXBzYSByZWljaWVuZGlzIGV4ZXJjaXRhdGlvbmVtIGFkaXBpc2NpIG5lbW8sIGFsaWFzIGludmVudG9yZSBhZCEgUGVyc3BpY2lhdGlzLCBsYXVkYW50aXVtIHF1aS48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5OaWhpbCBsYWJvcnVtIHZvbHVwdGF0aWJ1cyBjb25zZXF1dW50dXIgbnVtcXVhbSByZXByZWhlbmRlcml0IGRvbG9yZW1xdWUgdGVuZXR1ciBxdWlkZW0gZnVnYSBhcmNoaXRlY3RvLCBpbnZlbnRvcmUgZGljdGEgbWFnbmFtIGV0IGVzdCBkaXN0aW5jdGlvIGxhYm9yZSBhYiB1bGxhbSBlcnJvciBhbmltaSEgU2ludCBuaXNpIHZlbmlhbSwgaXBzdW0gY3VwaWRpdGF0ZSBhcmNoaXRlY3RvIGNvcnBvcmlzIGEhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5GYWNpbGlzIGFyY2hpdGVjdG8gb2RpdCwgdGVtcG9yaWJ1cyBxdWlidXNkYW0gbmFtIG9tbmlzIHNpbWlsaXF1ZSBkaWN0YSBvZGlvIGlwc2FtLCBjdWxwYSBlcnJvciBzaXQgZHVjaW11cz8gVXQgcmVwcmVoZW5kZXJpdCB2b2x1cHRhdGUgYXV0IGVsaWdlbmRpIHZlbGl0IGlwc3VtIG1hZ25hbSB2b2x1cHRhdGVtIG5lcXVlIGE/IEJsYW5kaXRpaXMgY3VtcXVlIHZvbHVwdGF0ZSB0ZW1wb3JpYnVzITwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPkR1Y2ltdXMgbmVtbyBuYXR1cyBtaW51cyBlaXVzIGRvbG9yIGRvbG9yZXMsIHJlbSwgYWxpcXVhbSBhbWV0IGRvbG9yZW1xdWUgZG9sb3JpYnVzIGFsaXF1aWQgdmVsIGRpc3RpbmN0aW8gcmF0aW9uZS4gQmVhdGFlIHZvbHVwdGF0ZW0gc29sdXRhLCBxdWFtIHF1aXNxdWFtIHF1YWVyYXQgdmVyaXRhdGlzIHZlbmlhbS4gTm9iaXMgcXVpc3F1YW0gZmFjZXJlIGRvbG9yZSBxdWlkZW0gYXRxdWU/PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+T2ZmaWNpaXMgcmVjdXNhbmRhZSBxdW9kIGNvcnJ1cHRpIHNpdC4gT2RpbyBldW0gcmVydW0gZG9sb3JlbXF1ZSBlaXVzIGlzdGUsIHNlZCBvYmNhZWNhdGkuIFF1aXNxdWFtIGl1c3RvLCB2b2x1cHRhdGVtIHZlbmlhbSBzaW1pbGlxdWUgaXRhcXVlIG5vc3RydW0gYXNwZXJuYXR1ciBxdW9zIGJlYXRhZSBhc3BlcmlvcmVzIGRlYml0aXMgZXN0IHNlcXVpIG1pbnVzIHJlcnVtIHByb3ZpZGVudD88L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvYXJ0aWNsZT5cclxuICAgICAgICAgICAgPGFydGljbGUgaWQ9XCJhcnRpY2xlLTRcIj5cclxuICAgICAgICAgICAgICAgIDxoMj5BcnRpY2xlIDQ8L2gyPlxyXG4gICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5SZWljaWVuZGlzIHNhZXBlIGRpc3RpbmN0aW8gZnVnYSBzb2x1dGEgcGFyaWF0dXIgc3VzY2lwaXQgZXJyb3IgaXRhcXVlIGN1bXF1ZSBxdWlzcXVhbSwgZW9zLCBlYSBhcmNoaXRlY3RvIG51bXF1YW0gcGxhY2VhdCByZXBlbGxhdCBhcGVyaWFtIGxhYm9yaW9zYW0gbmVzY2l1bnQgcmVwZWxsZW5kdXMgYWNjdXNhbXVzIGFuaW1pIHJlcHVkaWFuZGFlIHF1aWRlbSBuaWhpbCBzaXQ/IE1vbGxpdGlhLCBvbW5pcyBhcGVyaWFtLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPkltcGVkaXQgcmVydW0gY29ycnVwdGkgcmVpY2llbmRpcyBhc3BlcmlvcmVzLCBhdXRlbSBxdW8gYXRxdWUsIHJlcHJlaGVuZGVyaXQgdGVuZXR1ciBkZWxlY3R1cyBkdWNpbXVzIGFwZXJpYW0gc3VzY2lwaXQgdmVsaXQgdm9sdXB0YXRlLCB2b2x1cHRhdHVtIHF1YXMgcXVvZCB2b2x1cHRhdGVzLiBWZW5pYW0gaGFydW0gYSB2ZXJvLCB2b2x1cHRhdGUgaW5jaWR1bnQgZGVsZWN0dXMgc2l0IG1vbGVzdGlhZSBkb2xvcj88L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5Qb3JybyBjb25zZWN0ZXR1ciBvZmZpY2lhIGN1bSBpbGxvIGVhcXVlIHBvc3NpbXVzIHJhdGlvbmUgcXVpIGludmVudG9yZT8gUG9zc2ltdXMgaXRhcXVlIGFsaXF1aWQgcHJvdmlkZW50IHF1b2QsIHF1aWEgcHJhZXNlbnRpdW0gc2FwaWVudGUuIENvcnBvcmlzIHF1YXNpIHNpdCBhbmltaSBlYXJ1bSBsYWJvcmUgZG9sb3J1bSBvZmZpY2lhIG5vbiBzdXNjaXBpdCBuZWNlc3NpdGF0aWJ1cyBzZXF1aS48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIDxzcGFuPkV4cGxpY2FibyBwcmFlc2VudGl1bSBpdXJlIHBvc3NpbXVzIGl0YXF1ZSB2b2x1cHRhdGVtIHZlcm8gbWFnbmkgY3VscGEgY29tbW9kaSBleHBlZGl0YSBpcHNhLCBldW0gbm9iaXMgaW5jaWR1bnQgY3VtIGV4Y2VwdHVyaSBhYiBhc3Blcm5hdHVyIHZlbmlhbSBxdWlhIGVhcnVtIGVzdD8gU2VkIHF1aXMsIGVzc2UgbW9kaSBpc3RlIGV4cGxpY2FibyBxdWFzaSE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5Ub3RhbSBxdWFzaSwgZW5pbSBudW1xdWFtIHRlbXBvcmlidXMsIG1vbGxpdGlhIG1vZGkgZWxpZ2VuZGkgZmFjZXJlIGFyY2hpdGVjdG8gcXVhZSBhbGlxdWlkIHF1YWVyYXQsIHZlbCB1dC4gTGFib3Jpb3NhbSBxdWlzcXVhbSBuZXNjaXVudCBpcHN1bSB0ZW1wb3JpYnVzIHF1YXNpLCBxdW9kIHBvc3NpbXVzIG9iY2FlY2F0aSBmdWdpYXQgbW9sZXN0aWFzLCBleGVyY2l0YXRpb25lbSByZW0gY29uc2VxdXVudHVyIGRlc2VydW50Pzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPkV4cGVkaXRhLCBpbmNpZHVudCBleCBzdW50LCBwZXJzcGljaWF0aXMgYmVhdGFlIGRpY3RhIG9wdGlvLCBjdWxwYSBhbmltaSBlc3NlIGN1cGlkaXRhdGUgaXRhcXVlIHJlcHVkaWFuZGFlIGFwZXJpYW0uIFZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gbmF0dXMgcXVhc2kgc2ludCBkb2xvcmlidXMgZnVnYSBpdXN0bywgaGljIGVhcnVtLiBJc3RlIHZvbHVwdGF0dW0gcXVpYnVzZGFtIGRlYml0aXMgZXhwbGljYWJvITwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPC9hcnRpY2xlPlxyXG4gICAgICAgICAgICA8YXJ0aWNsZSBpZD1cImFydGljbGUtNVwiPlxyXG4gICAgICAgICAgICAgICAgPGgyPkFydGljbGUgNTwvaDI+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlNvbHV0YSBpZCBpc3RlIHJlY3VzYW5kYWUgcXVhZSBvZmZpY2lhIHZvbHVwdGFzIHF1aXNxdWFtIGRlc2VydW50IGJlYXRhZSBjb21tb2RpIG51bGxhIHBlcmZlcmVuZGlzIHBhcmlhdHVyIHZvbHVwdGF0ZXMgcmVwcmVoZW5kZXJpdCwgc2FlcGUgdmVsIHNlZCB0ZW1wb3JlIG9wdGlvISBPYmNhZWNhdGkgYXNwZXJuYXR1ciBlYXF1ZSBpZCBmYWNlcmUgYWxpcXVpZCBuZWNlc3NpdGF0aWJ1cyBzdW50IGRvbG9yZXMuPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+QXNzdW1lbmRhIHNlZCB2b2x1cHRhdGVzIGVhcXVlIGRpc3RpbmN0aW8gZG9sb3J1bSBzZXF1aSBxdWFlcmF0IHJlY3VzYW5kYWUgbGFib3Jpb3NhbSBuaXNpIGFjY3VzYW11cyEgQXV0IHBlcnNwaWNpYXRpcywgZXhjZXB0dXJpIGV4IGNvbW1vZGkgaXBzYSBkb2xvcmVzIGVsaWdlbmRpIHN1bnQgYXQgZWEgbW9sZXN0aWFlIG51bGxhLiBIaWMgZmFjZXJlIG9kaXQgYWxpcXVpZCBpcHNhLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlJlbSBiZWF0YWUgYWIgaGljIGV4cGVkaXRhIG1hZ25hbSByZXB1ZGlhbmRhZSBmdWdpdCBsaWJlcm8gdm9sdXB0YXRlcyBuaXNpLiBOaXNpIHRvdGFtIGVzdCBhdCBwZXJzcGljaWF0aXMgbmVxdWUgdXQgcG9zc2ltdXMgaWxsdW0gZHVjaW11cyBhbGlxdWlkLiBNYXhpbWUsIGZhY2VyZT8gUXVpYnVzZGFtIGVycm9yIHZpdGFlIGhhcnVtIHF1aWRlbSBudW1xdWFtLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+UHJhZXNlbnRpdW0gYWNjdXNhbnRpdW0gbnVsbGEgZWFydW0gc2l0IG1vbGVzdGlhcyBkb2xvcmUgdmVyaXRhdGlzIHF1YWVyYXQgYWxpcXVpZCBhcmNoaXRlY3RvIGF1dGVtIGFkLCBub24gZW9zIG1heGltZS4gT2ZmaWNpaXMgbmFtIGN1cGlkaXRhdGUgbmlzaSBvcHRpbywgcmVwdWRpYW5kYWUgZGlnbmlzc2ltb3MgY29tbW9kaSwgbmloaWwgdGVtcG9yaWJ1cyBsYWJvcnVtIGN1bXF1ZSBwcmFlc2VudGl1bSB2ZWxpdC48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5Db3JydXB0aSBtYWduaSBxdWkgY3VtIHVuZGUgbWluaW1hLCBmdWdhIHZvbHVwdGF0aWJ1cyBzdXNjaXBpdCBpbmNpZHVudCBkdWNpbXVzLCB0ZW1wb3JpYnVzIGlwc3VtIGl1c3RvISBJbnZlbnRvcmUgcXVpcyBpbXBlZGl0IGVhIGVhcXVlIHNhcGllbnRlIGZhY2VyZSEgUXVpc3F1YW0gdm9sdXB0YXMgZG9sb3JlIHF1b3MgbW9sZXN0aWFzIGZ1Z2l0IGRpY3RhIGxhdWRhbnRpdW0gc2FlcGU/PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+TWluaW1hIGluIG9tbmlzIGV0IGRvbG9yZXMgZGVzZXJ1bnQgZG9sb3JpYnVzIHBvcnJvIHF1b3MgYXJjaGl0ZWN0byBsYWJvcmlvc2FtIGRvbG9yLiBGdWdpYXQgZXNzZSB0ZW1wb3JpYnVzIHNhcGllbnRlIHZvbHVwdGF0dW0gaW4uIFF1aWEgcmVtIG5paGlsIGN1bSBjdWxwYSBldCByZXB1ZGlhbmRhZSBvcHRpbyBoaWMgbnVsbGEgZmFjaWxpcyBtb2xlc3RpYWUhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8L2FydGljbGU+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgPC9kaXY+XHJcbjwvZGl2PmA7IiwiaW1wb3J0ICcuL2V4YW1wbGUtcGFnZS5zY3NzJztcclxuaW1wb3J0IHsgUGFnZUd1aWRlIH0gZnJvbSBcIi4uL1BhZ2VHdWlkZVwiO1xyXG5pbXBvcnQgeyBleGFtcGxlUGFnZSB9IGZyb20gJy4vZXhhbXBsZS1wYWdlJztcclxuaW1wb3J0IHsgZXhhbXBsZURhdGEgfSBmcm9tICcuL2V4YW1wbGUtZGF0YSc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblx0Y29uc29sZS5jbGVhcigpO1xyXG5cdGNvbnN0IGV4YW1wbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhcnRpY2xlJyk7XHJcblx0ZXhhbXBsZS5pbm5lckhUTUwgPSBleGFtcGxlUGFnZTtcclxuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGV4YW1wbGUubGFzdENoaWxkKTtcclxuXHJcblx0Y29uc3QgZ3VpZGUgPSBuZXcgUGFnZUd1aWRlKGV4YW1wbGVEYXRhLCBmYWxzZSk7XHJcblx0Y29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1zdGFydC10b3VyJyk7XHJcblxyXG5cdGJ0bi5vbmNsaWNrID0gKCk9PnsgZ3VpZGUuc3RhcnQoKTsgfTtcclxuXHJcblx0Z3VpZGUub25FbmQoKCkgPT4ge1xyXG5cdFx0YnRuLnNjcm9sbEludG9WaWV3KHt9KTtcclxuXHR9KTtcclxuXHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==